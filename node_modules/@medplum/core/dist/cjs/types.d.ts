import { Bundle, ElementDefinition, SearchParameter, StructureDefinition } from '@medplum/fhirtypes';
import { SearchParameterDetails } from './searchparams';
export interface TypedValue {
    readonly type: string;
    readonly value: any;
}
/**
 * List of property types.
 * http://www.hl7.org/fhir/valueset-defined-types.html
 * The list here includes additions found from StructureDefinition resources.
 */
export declare enum PropertyType {
    Address = "Address",
    Age = "Age",
    Annotation = "Annotation",
    Attachment = "Attachment",
    BackboneElement = "BackboneElement",
    CodeableConcept = "CodeableConcept",
    Coding = "Coding",
    ContactDetail = "ContactDetail",
    ContactPoint = "ContactPoint",
    Contributor = "Contributor",
    Count = "Count",
    DataRequirement = "DataRequirement",
    Distance = "Distance",
    Dosage = "Dosage",
    Duration = "Duration",
    Expression = "Expression",
    Extension = "Extension",
    HumanName = "HumanName",
    Identifier = "Identifier",
    MarketingStatus = "MarketingStatus",
    Meta = "Meta",
    Money = "Money",
    Narrative = "Narrative",
    ParameterDefinition = "ParameterDefinition",
    Period = "Period",
    Population = "Population",
    ProdCharacteristic = "ProdCharacteristic",
    ProductShelfLife = "ProductShelfLife",
    Quantity = "Quantity",
    Range = "Range",
    Ratio = "Ratio",
    Reference = "Reference",
    RelatedArtifact = "RelatedArtifact",
    SampledData = "SampledData",
    Signature = "Signature",
    SubstanceAmount = "SubstanceAmount",
    SystemString = "http://hl7.org/fhirpath/System.String",
    Timing = "Timing",
    TriggerDefinition = "TriggerDefinition",
    UsageContext = "UsageContext",
    base64Binary = "base64Binary",
    boolean = "boolean",
    canonical = "canonical",
    code = "code",
    date = "date",
    dateTime = "dateTime",
    decimal = "decimal",
    id = "id",
    instant = "instant",
    integer = "integer",
    markdown = "markdown",
    oid = "oid",
    positiveInt = "positiveInt",
    string = "string",
    time = "time",
    unsignedInt = "unsignedInt",
    uri = "uri",
    url = "url",
    uuid = "uuid"
}
/**
 * An IndexedStructureDefinition is a lookup-optimized version of a StructureDefinition.
 *
 * StructureDefinition resources contain schema information for other resource types.
 * These schemas can be used to automatically generate user interface elements for
 * resources.
 *
 * However, a StructureDefinition resource is not optimized for realtime lookups.  All
 * resource types, sub types, and property definitions are stored in a flat array of
 * ElementDefinition objects.  Therefore, to lookup the schema for a property (i.e., "Patient.name")
 * requires a linear scan of all ElementDefinition objects
 *
 * A StructureDefinition resource contains information about one or more types.
 * For example, the "Patient" StructureDefinition includes "Patient", "Patient_Contact",
 * "Patient_Communication", and "Patient_Link".  This is inefficient.
 *
 * Instead, we create an indexed version of the StructureDefinition, called IndexedStructureDefinition.
 * In an IndexedStructureDefinition, retrieving a property definition is a hashtable lookup.
 *
 * The hierarchy is:
 *   IndexedStructureDefinition - top level for one resource type
 *   TypeSchema - one per resource type and all contained BackboneElements
 *   PropertySchema - one per property/field
 */
export interface IndexedStructureDefinition {
    types: {
        [resourceType: string]: TypeSchema;
    };
}
/**
 * An indexed TypeSchema.
 *
 * Example:  The IndexedStructureDefinition for "Patient" would include the following TypeSchemas:
 *   1) Patient
 *   2) Patient_Contact
 *   3) Patient_Communication
 *   4) Patient_Link
 */
export interface TypeSchema {
    structureDefinition: StructureDefinition;
    elementDefinition: ElementDefinition;
    display: string;
    properties: {
        [name: string]: ElementDefinition;
    };
    searchParams?: {
        [code: string]: SearchParameter;
    };
    searchParamsDetails?: {
        [code: string]: SearchParameterDetails;
    };
    description?: string;
    parentType?: string;
}
/**
 * Creates a new empty IndexedStructureDefinition.
 * @returns The empty IndexedStructureDefinition.
 * @deprecated Use globalSchema
 */
export declare function createSchema(): IndexedStructureDefinition;
/**
 * Indexes a bundle of StructureDefinitions for faster lookup.
 * @param bundle A FHIR bundle StructureDefinition resources.
 * @see {@link IndexedStructureDefinition} for more details on indexed StructureDefinitions.
 */
export declare function indexStructureDefinitionBundle(bundle: Bundle): void;
/**
 * Indexes a StructureDefinition for fast lookup.
 * @param structureDefinition The original StructureDefinition.
 * @see {@link IndexedStructureDefinition} for more details on indexed StructureDefinitions.
 */
export declare function indexStructureDefinition(structureDefinition: StructureDefinition): void;
/**
 * Indexes a bundle of SearchParameter resources for faster lookup.
 * @param bundle A FHIR bundle SearchParameter resources.
 * @see {@link IndexedStructureDefinition} for more details on indexed StructureDefinitions.
 */
export declare function indexSearchParameterBundle(bundle: Bundle<SearchParameter>): void;
/**
 * Indexes a SearchParameter resource for fast lookup.
 * Indexes by SearchParameter.code, which is the query string parameter name.
 * @param searchParam The SearchParameter resource.
 * @see {@link IndexedStructureDefinition} for more details on indexed StructureDefinitions.
 */
export declare function indexSearchParameter(searchParam: SearchParameter): void;
export declare function buildTypeName(components: string[]): string;
export declare function getPropertyDisplayName(path: string): string;
/**
 * Returns an element definition by type and property name.
 * Handles content references.
 * @param typeName The type name.
 * @param propertyName The property name.
 * @returns The element definition if found.
 */
export declare function getElementDefinition(typeName: string, propertyName: string): ElementDefinition | undefined;
/**
 * Global schema singleton.
 */
export declare const globalSchema: IndexedStructureDefinition;
