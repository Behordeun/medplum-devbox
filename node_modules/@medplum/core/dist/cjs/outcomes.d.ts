import { OperationOutcome } from '@medplum/fhirtypes';
export declare const allOk: OperationOutcome;
export declare const created: OperationOutcome;
export declare const notModified: OperationOutcome;
export declare const notFound: OperationOutcome;
export declare const unauthorized: OperationOutcome;
export declare const forbidden: OperationOutcome;
export declare const gone: OperationOutcome;
export declare const tooManyRequests: OperationOutcome;
export declare function badRequest(details: string, expression?: string): OperationOutcome;
export declare function isOk(outcome: OperationOutcome): boolean;
export declare function isNotFound(outcome: OperationOutcome): boolean;
export declare function isGone(outcome: OperationOutcome): boolean;
export declare function getStatus(outcome: OperationOutcome): number;
/**
 * Asserts that the operation completed successfully and that the resource is defined.
 * @param outcome The operation outcome.
 * @param resource The resource that may or may not have been returned.
 */
export declare function assertOk<T>(outcome: OperationOutcome, resource: T | undefined): asserts resource is T;
export declare class OperationOutcomeError extends Error {
    readonly outcome: OperationOutcome;
    constructor(outcome: OperationOutcome);
}
/**
 * Normalizes an error object into a displayable error string.
 * @param error The error value which could be a string, Error, OperationOutcome, or other unknown type.
 * @returns A display string for the error.
 */
export declare function normalizeErrorString(error: unknown): string;
