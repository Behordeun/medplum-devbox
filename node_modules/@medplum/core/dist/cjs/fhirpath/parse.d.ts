import { ParserBuilder } from '../fhirlexer';
import { TypedValue } from '../types';
import { FhirPathAtom } from './atoms';
/**
 * Operator precedence
 * See: https://hl7.org/fhirpath/#operator-precedence
 */
export declare const enum OperatorPrecedence {
    FunctionCall = 0,
    Dot = 1,
    Indexer = 2,
    UnaryAdd = 3,
    UnarySubtract = 3,
    Multiply = 4,
    Divide = 4,
    IntegerDivide = 4,
    Modulo = 4,
    Add = 5,
    Subtract = 5,
    Ampersand = 5,
    Is = 6,
    As = 6,
    Union = 7,
    GreaterThan = 8,
    GreaterThanOrEquals = 8,
    LessThan = 8,
    LessThanOrEquals = 8,
    Equals = 9,
    Equivalent = 9,
    NotEquals = 9,
    NotEquivalent = 9,
    In = 10,
    Contains = 10,
    And = 11,
    Xor = 12,
    Or = 12,
    Implies = 13,
    Arrow = 100,
    Semicolon = 200
}
export declare function initFhirPathParserBuilder(): ParserBuilder;
/**
 * Parses a FHIRPath expression into an AST.
 * The result can be used to evaluate the expression against a resource or other object.
 * This method is useful if you know that you will evaluate the same expression many times
 * against different resources.
 * @param input The FHIRPath expression to parse.
 * @returns The AST representing the expression.
 */
export declare function parseFhirPath(input: string): FhirPathAtom;
/**
 * Evaluates a FHIRPath expression against a resource or other object.
 * @param expression The FHIRPath expression to parse.
 * @param input The resource or object to evaluate the expression against.
 * @returns The result of the FHIRPath expression against the resource or object.
 */
export declare function evalFhirPath(expression: string, input: unknown): unknown[];
/**
 * Evaluates a FHIRPath expression against a resource or other object.
 * @param expression The FHIRPath expression to parse.
 * @param input The resource or object to evaluate the expression against.
 * @returns The result of the FHIRPath expression against the resource or object.
 */
export declare function evalFhirPathTyped(expression: string, input: TypedValue[]): TypedValue[];
