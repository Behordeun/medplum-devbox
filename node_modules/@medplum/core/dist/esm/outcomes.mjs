const OK_ID = 'ok';
const CREATED_ID = 'created';
const GONE_ID = 'gone';
const NOT_MODIFIED_ID = 'not-modified';
const NOT_FOUND_ID = 'not-found';
const UNAUTHORIZED_ID = 'unauthorized';
const FORBIDDEN_ID = 'forbidden';
const TOO_MANY_REQUESTS_ID = 'too-many-requests';
const allOk = {
    resourceType: 'OperationOutcome',
    id: OK_ID,
    issue: [
        {
            severity: 'information',
            code: 'informational',
            details: {
                text: 'All OK',
            },
        },
    ],
};
const created = {
    resourceType: 'OperationOutcome',
    id: CREATED_ID,
    issue: [
        {
            severity: 'information',
            code: 'informational',
            details: {
                text: 'Created',
            },
        },
    ],
};
const notModified = {
    resourceType: 'OperationOutcome',
    id: NOT_MODIFIED_ID,
    issue: [
        {
            severity: 'information',
            code: 'informational',
            details: {
                text: 'Not Modified',
            },
        },
    ],
};
const notFound = {
    resourceType: 'OperationOutcome',
    id: NOT_FOUND_ID,
    issue: [
        {
            severity: 'error',
            code: 'not-found',
            details: {
                text: 'Not found',
            },
        },
    ],
};
const unauthorized = {
    resourceType: 'OperationOutcome',
    id: UNAUTHORIZED_ID,
    issue: [
        {
            severity: 'error',
            code: 'login',
            details: {
                text: 'Unauthorized',
            },
        },
    ],
};
const forbidden = {
    resourceType: 'OperationOutcome',
    id: FORBIDDEN_ID,
    issue: [
        {
            severity: 'error',
            code: 'forbidden',
            details: {
                text: 'Forbidden',
            },
        },
    ],
};
const gone = {
    resourceType: 'OperationOutcome',
    id: GONE_ID,
    issue: [
        {
            severity: 'error',
            code: 'deleted',
            details: {
                text: 'Gone',
            },
        },
    ],
};
const tooManyRequests = {
    resourceType: 'OperationOutcome',
    id: TOO_MANY_REQUESTS_ID,
    issue: [
        {
            severity: 'error',
            code: 'throttled',
            details: {
                text: 'Too Many Requests',
            },
        },
    ],
};
function badRequest(details, expression) {
    return {
        resourceType: 'OperationOutcome',
        issue: [
            {
                severity: 'error',
                code: 'invalid',
                details: {
                    text: details,
                },
                expression: expression ? [expression] : undefined,
            },
        ],
    };
}
function isOk(outcome) {
    return outcome.id === OK_ID || outcome.id === CREATED_ID || outcome.id === NOT_MODIFIED_ID;
}
function isNotFound(outcome) {
    return outcome.id === NOT_FOUND_ID;
}
function isGone(outcome) {
    return outcome.id === GONE_ID;
}
function getStatus(outcome) {
    if (outcome.id === OK_ID) {
        return 200;
    }
    else if (outcome.id === CREATED_ID) {
        return 201;
    }
    else if (outcome.id === NOT_MODIFIED_ID) {
        return 304;
    }
    else if (outcome.id === UNAUTHORIZED_ID) {
        return 401;
    }
    else if (outcome.id === FORBIDDEN_ID) {
        return 403;
    }
    else if (outcome.id === NOT_FOUND_ID) {
        return 404;
    }
    else if (outcome.id === GONE_ID) {
        return 410;
    }
    else if (outcome.id === TOO_MANY_REQUESTS_ID) {
        return 429;
    }
    else {
        return 400;
    }
}
/**
 * Asserts that the operation completed successfully and that the resource is defined.
 * @param outcome The operation outcome.
 * @param resource The resource that may or may not have been returned.
 */
function assertOk(outcome, resource) {
    if (!isOk(outcome) || resource === undefined) {
        throw new OperationOutcomeError(outcome);
    }
}
class OperationOutcomeError extends Error {
    constructor(outcome) {
        super(outcome?.issue?.[0].details?.text);
        this.outcome = outcome;
    }
}
/**
 * Normalizes an error object into a displayable error string.
 * @param error The error value which could be a string, Error, OperationOutcome, or other unknown type.
 * @returns A display string for the error.
 */
function normalizeErrorString(error) {
    if (!error) {
        return 'Unknown error';
    }
    if (typeof error === 'string') {
        return error;
    }
    if (error instanceof Error) {
        return error.message;
    }
    if (typeof error === 'object' && 'resourceType' in error) {
        const outcome = error;
        return outcome.issue?.[0]?.details?.text ?? 'Unknown error';
    }
    return JSON.stringify(error);
}

export { OperationOutcomeError, allOk, assertOk, badRequest, created, forbidden, getStatus, gone, isGone, isNotFound, isOk, normalizeErrorString, notFound, notModified, tooManyRequests, unauthorized };
//# sourceMappingURL=outcomes.mjs.map
