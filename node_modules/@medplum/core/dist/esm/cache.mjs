import { __classPrivateFieldSet, __classPrivateFieldGet } from './node_modules/tslib/tslib.es6.mjs';

var _LRUCache_instances, _LRUCache_max, _LRUCache_cache, _LRUCache_first;
/**
 * LRU cache (least recently used)
 * Source: https://stackoverflow.com/a/46432113
 */
class LRUCache {
    constructor(max = 10) {
        _LRUCache_instances.add(this);
        _LRUCache_max.set(this, void 0);
        _LRUCache_cache.set(this, void 0);
        __classPrivateFieldSet(this, _LRUCache_max, max, "f");
        __classPrivateFieldSet(this, _LRUCache_cache, new Map(), "f");
    }
    /**
     * Deletes all values from the cache.
     */
    clear() {
        __classPrivateFieldGet(this, _LRUCache_cache, "f").clear();
    }
    /**
     * Returns the value for the given key.
     * @param key The key to retrieve.
     * @returns The value if found; undefined otherwise.
     */
    get(key) {
        const item = __classPrivateFieldGet(this, _LRUCache_cache, "f").get(key);
        if (item) {
            __classPrivateFieldGet(this, _LRUCache_cache, "f").delete(key);
            __classPrivateFieldGet(this, _LRUCache_cache, "f").set(key, item);
        }
        return item;
    }
    /**
     * Sets the value for the given key.
     * @param key The key to set.
     * @param val The value to set.
     */
    set(key, val) {
        if (__classPrivateFieldGet(this, _LRUCache_cache, "f").has(key)) {
            __classPrivateFieldGet(this, _LRUCache_cache, "f").delete(key);
        }
        else if (__classPrivateFieldGet(this, _LRUCache_cache, "f").size >= __classPrivateFieldGet(this, _LRUCache_max, "f")) {
            __classPrivateFieldGet(this, _LRUCache_cache, "f").delete(__classPrivateFieldGet(this, _LRUCache_instances, "m", _LRUCache_first).call(this));
        }
        __classPrivateFieldGet(this, _LRUCache_cache, "f").set(key, val);
    }
    /**
     * Deletes the value for the given key.
     * @param key The key to delete.
     */
    delete(key) {
        __classPrivateFieldGet(this, _LRUCache_cache, "f").delete(key);
    }
    /**
     * Returns the list of all keys in the cache.
     * @returns The array of keys in the cache.
     */
    keys() {
        return __classPrivateFieldGet(this, _LRUCache_cache, "f").keys();
    }
}
_LRUCache_max = new WeakMap(), _LRUCache_cache = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_first = function _LRUCache_first() {
    // This works because the Map class maintains ordered keys.
    return __classPrivateFieldGet(this, _LRUCache_cache, "f").keys().next().value;
};

export { LRUCache };
//# sourceMappingURL=cache.mjs.map
