{"version":3,"file":"parse.mjs","sources":["../../../src/fhirpath/parse.ts"],"sourcesContent":["import { Quantity } from '@medplum/fhirtypes';\nimport { Atom, InfixParselet, Parser, ParserBuilder, PrefixParselet } from '../fhirlexer';\nimport { PropertyType, TypedValue } from '../types';\nimport {\n  AndAtom,\n  ArithemticOperatorAtom,\n  AsAtom,\n  ConcatAtom,\n  ContainsAtom,\n  DotAtom,\n  EmptySetAtom,\n  EqualsAtom,\n  EquivalentAtom,\n  FhirPathAtom,\n  FunctionAtom,\n  InAtom,\n  IndexerAtom,\n  IsAtom,\n  LiteralAtom,\n  NotEqualsAtom,\n  NotEquivalentAtom,\n  OrAtom,\n  SymbolAtom,\n  UnaryOperatorAtom,\n  UnionAtom,\n  XorAtom,\n} from './atoms';\nimport { parseDateString } from './date';\nimport { tokenize } from './tokenize';\nimport { toTypedValue } from './utils';\n\n/**\n * Operator precedence\n * See: https://hl7.org/fhirpath/#operator-precedence\n */\nexport const enum OperatorPrecedence {\n  FunctionCall = 0,\n  Dot = 1,\n  Indexer = 2,\n  UnaryAdd = 3,\n  UnarySubtract = 3,\n  Multiply = 4,\n  Divide = 4,\n  IntegerDivide = 4,\n  Modulo = 4,\n  Add = 5,\n  Subtract = 5,\n  Ampersand = 5,\n  Is = 6,\n  As = 6,\n  Union = 7,\n  GreaterThan = 8,\n  GreaterThanOrEquals = 8,\n  LessThan = 8,\n  LessThanOrEquals = 8,\n  Equals = 9,\n  Equivalent = 9,\n  NotEquals = 9,\n  NotEquivalent = 9,\n  In = 10,\n  Contains = 10,\n  And = 11,\n  Xor = 12,\n  Or = 12,\n  Implies = 13,\n  Arrow = 100,\n  Semicolon = 200,\n}\n\nconst PARENTHESES_PARSELET: PrefixParselet = {\n  parse(parser: Parser) {\n    const expr = parser.consumeAndParse();\n    if (!parser.match(')')) {\n      throw new Error('Parse error: expected `)` got `' + parser.peek()?.value + '`');\n    }\n    return expr;\n  },\n};\n\nconst INDEXER_PARSELET: InfixParselet = {\n  parse(parser: Parser, left: Atom) {\n    const expr = parser.consumeAndParse();\n    if (!parser.match(']')) {\n      throw new Error('Parse error: expected `]`');\n    }\n    return new IndexerAtom(left, expr);\n  },\n\n  precedence: OperatorPrecedence.Indexer,\n};\n\nconst FUNCTION_CALL_PARSELET: InfixParselet = {\n  parse(parser: Parser, left: Atom) {\n    if (!(left instanceof SymbolAtom)) {\n      throw new Error('Unexpected parentheses');\n    }\n\n    const args = [];\n    while (!parser.match(')')) {\n      args.push(parser.consumeAndParse());\n      parser.match(',');\n    }\n\n    return new FunctionAtom(left.name, args); //, functions[left.name]);\n  },\n  precedence: OperatorPrecedence.FunctionCall,\n};\n\nfunction parseQuantity(str: string): Quantity {\n  const parts = str.split(' ');\n  const value = parseFloat(parts[0]);\n  let unit = parts[1];\n  if (unit && unit.startsWith(\"'\") && unit.endsWith(\"'\")) {\n    unit = unit.substring(1, unit.length - 1);\n  } else {\n    unit = '{' + unit + '}';\n  }\n  return { value, unit };\n}\n\nexport function initFhirPathParserBuilder(): ParserBuilder {\n  return new ParserBuilder()\n    .registerPrefix('String', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.string, value: token.value }),\n    })\n    .registerPrefix('DateTime', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.dateTime, value: parseDateString(token.value) }),\n    })\n    .registerPrefix('Quantity', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.Quantity, value: parseQuantity(token.value) }),\n    })\n    .registerPrefix('Number', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.decimal, value: parseFloat(token.value) }),\n    })\n    .registerPrefix('true', { parse: () => new LiteralAtom({ type: PropertyType.boolean, value: true }) })\n    .registerPrefix('false', { parse: () => new LiteralAtom({ type: PropertyType.boolean, value: false }) })\n    .registerPrefix('Symbol', { parse: (_, token) => new SymbolAtom(token.value) })\n    .registerPrefix('{}', { parse: () => new EmptySetAtom() })\n    .registerPrefix('(', PARENTHESES_PARSELET)\n    .registerInfix('[', INDEXER_PARSELET)\n    .registerInfix('(', FUNCTION_CALL_PARSELET)\n    .prefix('+', OperatorPrecedence.UnaryAdd, (_, right) => new UnaryOperatorAtom('+', right, (x) => x))\n    .prefix(\n      '-',\n      OperatorPrecedence.UnarySubtract,\n      (_, right) => new ArithemticOperatorAtom('-', right, right, (_, y) => -y)\n    )\n    .infixLeft('.', OperatorPrecedence.Dot, (left, _, right) => new DotAtom(left, right))\n    .infixLeft(\n      '/',\n      OperatorPrecedence.Divide,\n      (left, _, right) => new ArithemticOperatorAtom('/', left, right, (x, y) => x / y)\n    )\n    .infixLeft(\n      '*',\n      OperatorPrecedence.Multiply,\n      (left, _, right) => new ArithemticOperatorAtom('*', left, right, (x, y) => x * y)\n    )\n    .infixLeft(\n      '+',\n      OperatorPrecedence.Add,\n      (left, _, right) => new ArithemticOperatorAtom('+', left, right, (x, y) => x + y)\n    )\n    .infixLeft(\n      '-',\n      OperatorPrecedence.Subtract,\n      (left, _, right) => new ArithemticOperatorAtom('-', left, right, (x, y) => x - y)\n    )\n    .infixLeft('|', OperatorPrecedence.Union, (left, _, right) => new UnionAtom(left, right))\n    .infixLeft('=', OperatorPrecedence.Equals, (left, _, right) => new EqualsAtom(left, right))\n    .infixLeft('!=', OperatorPrecedence.Equals, (left, _, right) => new NotEqualsAtom(left, right))\n    .infixLeft('~', OperatorPrecedence.Equivalent, (left, _, right) => new EquivalentAtom(left, right))\n    .infixLeft('!~', OperatorPrecedence.NotEquivalent, (left, _, right) => new NotEquivalentAtom(left, right))\n    .infixLeft(\n      '<',\n      OperatorPrecedence.LessThan,\n      (left, _, right) => new ArithemticOperatorAtom('<', left, right, (x, y) => x < y)\n    )\n    .infixLeft(\n      '<=',\n      OperatorPrecedence.LessThanOrEquals,\n      (left, _, right) => new ArithemticOperatorAtom('<=', left, right, (x, y) => x <= y)\n    )\n    .infixLeft(\n      '>',\n      OperatorPrecedence.GreaterThan,\n      (left, _, right) => new ArithemticOperatorAtom('>', left, right, (x, y) => x > y)\n    )\n    .infixLeft(\n      '>=',\n      OperatorPrecedence.GreaterThanOrEquals,\n      (left, _, right) => new ArithemticOperatorAtom('>=', left, right, (x, y) => x >= y)\n    )\n    .infixLeft('&', OperatorPrecedence.Ampersand, (left, _, right) => new ConcatAtom(left, right))\n    .infixLeft('and', OperatorPrecedence.Is, (left, _, right) => new AndAtom(left, right))\n    .infixLeft('as', OperatorPrecedence.Is, (left, _, right) => new AsAtom(left, right))\n    .infixLeft('contains', OperatorPrecedence.Is, (left, _, right) => new ContainsAtom(left, right))\n    .infixLeft(\n      'div',\n      OperatorPrecedence.Is,\n      (left, _, right) => new ArithemticOperatorAtom('div', left, right, (x, y) => (x / y) | 0)\n    )\n    .infixLeft('in', OperatorPrecedence.Is, (left, _, right) => new InAtom(left, right))\n    .infixLeft('is', OperatorPrecedence.Is, (left, _, right) => new IsAtom(left, right))\n    .infixLeft(\n      'mod',\n      OperatorPrecedence.Is,\n      (left, _, right) => new ArithemticOperatorAtom('mod', left, right, (x, y) => x % y)\n    )\n    .infixLeft('or', OperatorPrecedence.Is, (left, _, right) => new OrAtom(left, right))\n    .infixLeft('xor', OperatorPrecedence.Is, (left, _, right) => new XorAtom(left, right));\n}\n\nconst fhirPathParserBuilder = initFhirPathParserBuilder();\n\n/**\n * Parses a FHIRPath expression into an AST.\n * The result can be used to evaluate the expression against a resource or other object.\n * This method is useful if you know that you will evaluate the same expression many times\n * against different resources.\n * @param input The FHIRPath expression to parse.\n * @returns The AST representing the expression.\n */\nexport function parseFhirPath(input: string): FhirPathAtom {\n  return new FhirPathAtom(input, fhirPathParserBuilder.construct(tokenize(input)).consumeAndParse());\n}\n\n/**\n * Evaluates a FHIRPath expression against a resource or other object.\n * @param expression The FHIRPath expression to parse.\n * @param input The resource or object to evaluate the expression against.\n * @returns The result of the FHIRPath expression against the resource or object.\n */\nexport function evalFhirPath(expression: string, input: unknown): unknown[] {\n  // eval requires a TypedValue array\n  // As a convenience, we can accept array or non-array, and TypedValue or unknown value\n  const array = Array.isArray(input) ? input : [input];\n  for (let i = 0; i < array.length; i++) {\n    const el = array[i];\n    if (!(typeof el === 'object' && 'type' in el && 'value' in el)) {\n      array[i] = toTypedValue(array[i]);\n    }\n  }\n  return evalFhirPathTyped(expression, array).map((e) => e.value);\n}\n\n/**\n * Evaluates a FHIRPath expression against a resource or other object.\n * @param expression The FHIRPath expression to parse.\n * @param input The resource or object to evaluate the expression against.\n * @returns The result of the FHIRPath expression against the resource or object.\n */\nexport function evalFhirPathTyped(expression: string, input: TypedValue[]): TypedValue[] {\n  return parseFhirPath(expression).eval(input);\n}\n"],"names":[],"mappings":"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"}