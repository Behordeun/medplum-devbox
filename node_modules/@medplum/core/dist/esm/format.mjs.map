{"version":3,"file":"format.mjs","sources":["../../src/format.ts"],"sourcesContent":["import {\n  Address,\n  CodeableConcept,\n  Coding,\n  HumanName,\n  Money,\n  Observation,\n  ObservationComponent,\n  Period,\n  Quantity,\n  Range,\n  Timing,\n} from '@medplum/fhirtypes';\nimport { capitalize } from './utils';\n\nexport interface AddressFormatOptions {\n  all?: boolean;\n  use?: boolean;\n  lineSeparator?: string;\n}\n\nexport interface HumanNameFormatOptions {\n  all?: boolean;\n  prefix?: boolean;\n  suffix?: boolean;\n  use?: boolean;\n}\n\n/**\n * Formats a FHIR Address as a string.\n * @param address The address to format.\n * @param options Optional address format options.\n * @returns The formatted address string.\n */\nexport function formatAddress(address: Address, options?: AddressFormatOptions): string {\n  const builder = [];\n\n  if (address.line) {\n    builder.push(...address.line);\n  }\n\n  if (address.city || address.state || address.postalCode) {\n    const cityStateZip = [];\n    if (address.city) {\n      cityStateZip.push(address.city);\n    }\n    if (address.state) {\n      cityStateZip.push(address.state);\n    }\n    if (address.postalCode) {\n      cityStateZip.push(address.postalCode);\n    }\n    builder.push(cityStateZip.join(', '));\n  }\n\n  if (address.use && (options?.all || options?.use)) {\n    builder.push('[' + address.use + ']');\n  }\n\n  return builder.join(options?.lineSeparator || ', ').trim();\n}\n\n/**\n * Formats a FHIR HumanName as a string.\n * @param name The name to format.\n * @param options Optional name format options.\n * @returns The formatted name string.\n */\nexport function formatHumanName(name: HumanName, options?: HumanNameFormatOptions): string {\n  const builder = [];\n\n  if (name.prefix && options?.prefix !== false) {\n    builder.push(...name.prefix);\n  }\n\n  if (name.given) {\n    builder.push(...name.given);\n  }\n\n  if (name.family) {\n    builder.push(name.family);\n  }\n\n  if (name.suffix && options?.suffix !== false) {\n    builder.push(...name.suffix);\n  }\n\n  if (name.use && (options?.all || options?.use)) {\n    builder.push('[' + name.use + ']');\n  }\n\n  return builder.join(' ').trim();\n}\n\n/**\n * Formats the given name portion of a FHIR HumanName element.\n * @param name The name to format.\n * @returns The formatted given name string.\n */\nexport function formatGivenName(name: HumanName): string {\n  const builder: string[] = [];\n  if (name.given) {\n    builder.push(...name.given);\n  }\n  return builder.join(' ').trim();\n}\n\n/**\n * Formats the family name portion of a FHIR HumanName element.\n * @param name The name to format.\n * @returns The formatted family name string.\n */\nexport function formatFamilyName(name: HumanName): string {\n  return name.family || '';\n}\n\n/**\n * Returns true if the given date object is a valid date.\n * Dates can be invalid if created by parsing an invalid string.\n * @param date A date object.\n * @returns Returns true if the date is a valid date.\n */\nexport function isValidDate(date: Date): boolean {\n  return date instanceof Date && !isNaN(date.getTime());\n}\n\n/**\n * Formats a FHIR date string as a human readable string.\n * Handles missing values and invalid dates.\n * @param date The date to format.\n * @param locales Optional locales.\n * @param options Optional date format options.\n * @returns The formatted date string.\n */\nexport function formatDate(\n  date: string | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions | undefined\n): string {\n  if (!date) {\n    return '';\n  }\n  const d = new Date(date);\n  if (!isValidDate(d)) {\n    return '';\n  }\n  d.setUTCHours(0, 0, 0, 0);\n  return d.toLocaleDateString(locales, { timeZone: 'UTC', ...options });\n}\n\n/**\n * Formats a FHIR time string as a human readable string.\n * Handles missing values and invalid dates.\n * @param time The date to format.\n * @param locales Optional locales.\n * @param options Optional time format options.\n * @returns The formatted time string.\n */\nexport function formatTime(\n  time: string | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions | undefined\n): string {\n  if (!time) {\n    return '';\n  }\n  const d = new Date('2000-01-01T' + time + 'Z');\n  if (!isValidDate(d)) {\n    return '';\n  }\n  return d.toLocaleTimeString(locales, options);\n}\n\n/**\n * Formats a FHIR dateTime string as a human readable string.\n * Handles missing values and invalid dates.\n * @param dateTime The dateTime to format.\n * @param locales Optional locales.\n * @param options Optional dateTime format options.\n * @returns The formatted dateTime string.\n */\nexport function formatDateTime(\n  dateTime: string | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions | undefined\n): string {\n  if (!dateTime) {\n    return '';\n  }\n  const d = new Date(dateTime);\n  if (!isValidDate(d)) {\n    return '';\n  }\n  return d.toLocaleString(locales, options);\n}\n\n/**\n * Formats a FHIR Period as a human readable string.\n * @param period The period to format.\n * @param locales Optional locales.\n * @param options Optional period format options.\n * @returns The formatted period string.\n */\nexport function formatPeriod(\n  period: Period | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions | undefined\n): string {\n  if (!period || (!period.start && !period.end)) {\n    return '';\n  }\n  return formatDateTime(period.start, locales, options) + ' - ' + formatDateTime(period.end, locales, options);\n}\n\nconst unitAdverbForm: Record<string, string> = {\n  s: 'every second',\n  min: 'every minute',\n  h: 'hourly',\n  d: 'daily',\n  wk: 'weekly',\n  mo: 'monthly',\n  a: 'annually',\n};\n\nconst singularUnits: Record<string, string> = {\n  s: 'second',\n  min: 'minute',\n  h: 'hour',\n  d: 'day',\n  wk: 'week',\n  mo: 'month',\n  a: 'year',\n};\n\nconst pluralUnits: Record<string, string> = {\n  s: 'seconds',\n  min: 'minutes',\n  h: 'hours',\n  d: 'days',\n  wk: 'weeks',\n  mo: 'months',\n  a: 'years',\n};\n\n/**\n * Formats a FHIR Timing as a human readable string.\n * @param timing The timing to format.\n * @returns The formatted timing string.\n */\nexport function formatTiming(timing: Timing | undefined): string {\n  if (!timing) {\n    return '';\n  }\n\n  const builder: string[] = [];\n\n  if (timing.repeat?.periodUnit) {\n    const frequency = timing.repeat.frequency || 1;\n    const period = timing.repeat.period || 1;\n    const periodUnit = timing.repeat.periodUnit;\n\n    if (frequency === 1 && period === 1) {\n      builder.push(unitAdverbForm[periodUnit]);\n    } else {\n      if (frequency === 1) {\n        builder.push('once');\n      } else {\n        builder.push(frequency + ' times');\n      }\n\n      if (period === 1) {\n        builder.push('per ' + singularUnits[periodUnit]);\n      } else {\n        builder.push('per ' + period + ' ' + pluralUnits[periodUnit]);\n      }\n    }\n\n    if (timing.repeat.dayOfWeek) {\n      builder.push('on ' + timing.repeat.dayOfWeek.map(capitalize).join(', '));\n    }\n\n    if (timing.repeat.timeOfDay) {\n      builder.push('at ' + timing.repeat.timeOfDay.map((t) => formatTime(t)).join(', '));\n    }\n  }\n\n  if (timing.event) {\n    builder.push(timing.event.map((d) => formatDateTime(d)).join(', '));\n  }\n\n  return capitalize(builder.join(' ').trim());\n}\n\n/**\n * Returns a human-readable string for a FHIR Range datatype, taking into account comparators and one-sided ranges\n * @param range A FHIR Range element\n * @param exclusive If true, one-sided ranges will be rendered with the '>' or '<' bounds rather than '>=' or '<='\n * @returns A human-readable string representation of the Range\n */\nexport function formatRange(range: Range | undefined, precision?: number, exclusive = false): string {\n  if (exclusive && precision === undefined) {\n    throw new Error('Precision must be specified for exclusive ranges');\n  }\n\n  const low = range?.low && { ...range.low };\n  const high = range?.high && { ...range.high };\n  if (!range || (low?.value === undefined && high?.value === undefined)) {\n    return '';\n  }\n\n  if (range.low?.value !== undefined && range.high?.value === undefined) {\n    if (exclusive && precision !== undefined) {\n      range.low.value = preciseDecrement(range.low.value, precision);\n      return `> ${formatQuantity(range.low, precision)}`;\n    }\n    return `>= ${formatQuantity(range.low, precision)}`;\n  }\n\n  if (range.low?.value === undefined && range.high?.value !== undefined) {\n    if (exclusive && precision !== undefined) {\n      range.high.value = preciseIncrement(range.high.value, precision);\n      return `< ${formatQuantity(range.high, precision)}`;\n    }\n    return `<= ${formatQuantity(range.high, precision)}`;\n  }\n\n  if (low?.unit === high?.unit) {\n    delete low?.unit;\n  }\n  return `${formatQuantity(low, precision)} - ${formatQuantity(high, precision)}`;\n}\n\n/**\n * Returns a human-readable string for a FHIR Quantity datatype, taking into account units and comparators\n * @param quantity A FHIR Quantity element\n * @returns A human-readable string representation of the Quantity\n */\nexport function formatQuantity(quantity: Quantity | undefined, precision?: number): string {\n  if (!quantity) {\n    return '';\n  }\n\n  const result = [];\n\n  if (quantity.comparator) {\n    result.push(quantity.comparator);\n    result.push(' ');\n  }\n\n  if (quantity.value !== undefined) {\n    if (precision !== undefined) {\n      result.push(quantity.value.toFixed(precision));\n    } else {\n      result.push(quantity.value);\n    }\n  }\n\n  if (quantity.unit) {\n    if (quantity.unit !== '%' && result[result.length - 1] !== ' ') {\n      result.push(' ');\n    }\n    result.push(quantity.unit);\n  }\n\n  return result.join('').trim();\n}\n\nexport function formatMoney(money: Money | undefined): string {\n  if (money?.value === undefined) {\n    return '';\n  }\n\n  return money.value.toLocaleString(undefined, {\n    style: 'currency',\n    currency: money.currency || 'USD',\n    currencyDisplay: 'narrowSymbol',\n  });\n}\n\n/**\n * Formats a CodeableConcept element as a string.\n * @param codeableConcept A FHIR CodeableConcept element\n * @returns The codeable concept as a string.\n */\nexport function formatCodeableConcept(codeableConcept: CodeableConcept | undefined): string {\n  if (!codeableConcept) {\n    return '';\n  }\n  if (codeableConcept.text) {\n    return codeableConcept.text;\n  }\n  if (codeableConcept.coding) {\n    return codeableConcept.coding.map((c) => formatCoding(c)).join(', ');\n  }\n  return '';\n}\n\n/**\n * Formats a Coding element as a string.\n * @param coding A FHIR Coding element\n * @returns The coding as a string.\n */\nexport function formatCoding(coding: Coding | undefined): string {\n  return coding?.display || coding?.code || '';\n}\n\n/**\n * Formats a FHIR Observation resource value as a string.\n * @param obs A FHIR Observation resource.\n * @returns A human-readable string representation of the Observation.\n */\nexport function formatObservationValue(obs: Observation | ObservationComponent | undefined): string {\n  if (!obs) {\n    return '';\n  }\n\n  if ('component' in obs) {\n    return (obs.component as ObservationComponent[]).map((c) => formatObservationValue(c)).join(' / ');\n  }\n\n  if (obs?.valueQuantity) {\n    return formatQuantity(obs.valueQuantity);\n  }\n\n  if (obs.valueCodeableConcept) {\n    return formatCodeableConcept(obs.valueCodeableConcept);\n  }\n\n  if (obs.valueString) {\n    return obs.valueString;\n  }\n\n  return '';\n}\n\n/**\n * Returns the input number increased by the `n` units of the specified precision\n * @param a The input number\n * @param precision The precision in number of digits.\n * @param n (default 1) The number of units to add\n */\nfunction preciseIncrement(a: number, precision: number, n = 1): number {\n  return (toPreciseInteger(a, precision) + n) * Math.pow(10, -precision);\n}\n\n/**\n * Returns the input number decreased by the `n` units of the specified precision\n * @param a The input number\n * @param precision The precision in number of digits.\n * @param n (default 1) The number of units to subtract\n */\nfunction preciseDecrement(a: number, precision: number, n = 1): number {\n  return (toPreciseInteger(a, precision) - n) * Math.pow(10, -precision);\n}\n\n/**\n * Returns an integer representation of the number with the given precision.\n * For example, if precision is 2, then 1.2345 will be returned as 123.\n * @param a The number.\n * @param precision Optional precision in number of digits.\n * @returns The integer with the given precision.\n */\nfunction toPreciseInteger(a: number, precision?: number): number {\n  if (precision === undefined) {\n    return a;\n  }\n  return Math.round(a * Math.pow(10, precision));\n}\n"],"names":[],"mappings":"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"}