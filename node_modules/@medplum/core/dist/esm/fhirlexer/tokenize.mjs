import { __classPrivateFieldSet, __classPrivateFieldGet } from '../node_modules/tslib/tslib.es6.mjs';

var _Tokenizer_instances, _Tokenizer_str, _Tokenizer_keywords, _Tokenizer_operators, _Tokenizer_result, _Tokenizer_pos, _Tokenizer_markStack, _Tokenizer_prevToken, _Tokenizer_peekToken, _Tokenizer_consumeToken, _Tokenizer_consumeWhitespace, _Tokenizer_consumeMultiLineComment, _Tokenizer_consumeSingleLineComment, _Tokenizer_consumeString, _Tokenizer_consumeBacktickSymbol, _Tokenizer_consumeDateTime, _Tokenizer_consumeNumber, _Tokenizer_consumeSymbol, _Tokenizer_consumeOperator, _Tokenizer_consumeWhile, _Tokenizer_curr, _Tokenizer_prev, _Tokenizer_peek, _Tokenizer_mark, _Tokenizer_reset, _Tokenizer_advance, _Tokenizer_buildToken;
const STANDARD_UNITS = [
    'year',
    'years',
    'month',
    'months',
    'week',
    'weeks',
    'day',
    'days',
    'hour',
    'hours',
    'minute',
    'minutes',
    'second',
    'seconds',
    'millisecond',
    'milliseconds',
];
class Tokenizer {
    constructor(str, keywords, operators) {
        _Tokenizer_instances.add(this);
        _Tokenizer_str.set(this, void 0);
        _Tokenizer_keywords.set(this, void 0);
        _Tokenizer_operators.set(this, void 0);
        _Tokenizer_result.set(this, []);
        _Tokenizer_pos.set(this, { index: 0, line: 1, column: 0 });
        _Tokenizer_markStack.set(this, []);
        __classPrivateFieldSet(this, _Tokenizer_str, str, "f");
        __classPrivateFieldSet(this, _Tokenizer_keywords, keywords, "f");
        __classPrivateFieldSet(this, _Tokenizer_operators, operators, "f");
    }
    tokenize() {
        while (__classPrivateFieldGet(this, _Tokenizer_pos, "f").index < __classPrivateFieldGet(this, _Tokenizer_str, "f").length) {
            const token = __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeToken).call(this);
            if (token) {
                __classPrivateFieldGet(this, _Tokenizer_result, "f").push(token);
            }
        }
        return __classPrivateFieldGet(this, _Tokenizer_result, "f");
    }
}
_Tokenizer_str = new WeakMap(), _Tokenizer_keywords = new WeakMap(), _Tokenizer_operators = new WeakMap(), _Tokenizer_result = new WeakMap(), _Tokenizer_pos = new WeakMap(), _Tokenizer_markStack = new WeakMap(), _Tokenizer_instances = new WeakSet(), _Tokenizer_prevToken = function _Tokenizer_prevToken() {
    return __classPrivateFieldGet(this, _Tokenizer_result, "f").slice(-1)[0];
}, _Tokenizer_peekToken = function _Tokenizer_peekToken() {
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_mark).call(this);
    const token = __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeToken).call(this);
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_reset).call(this);
    return token;
}, _Tokenizer_consumeToken = function _Tokenizer_consumeToken() {
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhitespace).call(this);
    const c = __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this);
    if (!c) {
        return undefined;
    }
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_mark).call(this);
    const next = __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_peek).call(this);
    if (c === '/' && next === '*') {
        return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeMultiLineComment).call(this);
    }
    if (c === '/' && next === '/') {
        return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeSingleLineComment).call(this);
    }
    if (c === "'" || c === '"') {
        return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeString).call(this, c);
    }
    if (c === '`') {
        return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeBacktickSymbol).call(this);
    }
    if (c === '@') {
        return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeDateTime).call(this);
    }
    if (c.match(/\d/)) {
        return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeNumber).call(this);
    }
    if (c.match(/\w/)) {
        return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeSymbol).call(this);
    }
    if (c === '$' && next.match(/\w/)) {
        return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeSymbol).call(this);
    }
    return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeOperator).call(this);
}, _Tokenizer_consumeWhitespace = function _Tokenizer_consumeWhitespace() {
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this).match(/\s/));
}, _Tokenizer_consumeMultiLineComment = function _Tokenizer_consumeMultiLineComment() {
    const start = __classPrivateFieldGet(this, _Tokenizer_pos, "f").index;
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) !== '*' || __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_peek).call(this) !== '/');
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
    return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_buildToken).call(this, 'Comment', __classPrivateFieldGet(this, _Tokenizer_str, "f").substring(start, __classPrivateFieldGet(this, _Tokenizer_pos, "f").index));
}, _Tokenizer_consumeSingleLineComment = function _Tokenizer_consumeSingleLineComment() {
    return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_buildToken).call(this, 'Comment', __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) !== '\n'));
}, _Tokenizer_consumeString = function _Tokenizer_consumeString(endChar) {
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
    const result = __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_buildToken).call(this, 'String', __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_prev).call(this) === '\\' || __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) !== endChar));
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
    return result;
}, _Tokenizer_consumeBacktickSymbol = function _Tokenizer_consumeBacktickSymbol() {
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
    const result = __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_buildToken).call(this, 'Symbol', __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) !== '`'));
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
    return result;
}, _Tokenizer_consumeDateTime = function _Tokenizer_consumeDateTime() {
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this); // Consume "@"
    const start = __classPrivateFieldGet(this, _Tokenizer_pos, "f").index;
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this).match(/[\d-]/));
    if (__classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) === 'T') {
        __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
        __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this).match(/[\d:]/));
        if (__classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) === '.' && __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_peek).call(this).match(/\d/)) {
            __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
            __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this).match(/\d/));
        }
        if (__classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) === 'Z') {
            __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
        }
        else if (__classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) === '+' || __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) === '-') {
            __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
            __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this).match(/[\d:]/));
        }
    }
    return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_buildToken).call(this, 'DateTime', __classPrivateFieldGet(this, _Tokenizer_str, "f").substring(start, __classPrivateFieldGet(this, _Tokenizer_pos, "f").index));
}, _Tokenizer_consumeNumber = function _Tokenizer_consumeNumber() {
    const start = __classPrivateFieldGet(this, _Tokenizer_pos, "f").index;
    let id = 'Number';
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this).match(/\d/));
    if (__classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) === '.' && __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_peek).call(this).match(/\d/)) {
        __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
        __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this).match(/\d/));
    }
    if (__classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) === ' ') {
        if (isUnitToken(__classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_peekToken).call(this))) {
            id = 'Quantity';
            __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeToken).call(this);
        }
    }
    return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_buildToken).call(this, id, __classPrivateFieldGet(this, _Tokenizer_str, "f").substring(start, __classPrivateFieldGet(this, _Tokenizer_pos, "f").index));
}, _Tokenizer_consumeSymbol = function _Tokenizer_consumeSymbol() {
    const value = __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_consumeWhile).call(this, () => __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this).match(/[$\w]/));
    if (__classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_prevToken).call(this)?.value !== '.' && __classPrivateFieldGet(this, _Tokenizer_keywords, "f").includes(value)) {
        return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_buildToken).call(this, value, value);
    }
    return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_buildToken).call(this, 'Symbol', value);
}, _Tokenizer_consumeOperator = function _Tokenizer_consumeOperator() {
    const c = __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this);
    const next = __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_peek).call(this);
    const twoCharOp = c + next;
    if (__classPrivateFieldGet(this, _Tokenizer_operators, "f").includes(twoCharOp)) {
        __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
        __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
        return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_buildToken).call(this, twoCharOp, twoCharOp);
    }
    __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
    return __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_buildToken).call(this, c, c);
}, _Tokenizer_consumeWhile = function _Tokenizer_consumeWhile(condition) {
    const start = __classPrivateFieldGet(this, _Tokenizer_pos, "f").index;
    while (__classPrivateFieldGet(this, _Tokenizer_pos, "f").index < __classPrivateFieldGet(this, _Tokenizer_str, "f").length && condition()) {
        __classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_advance).call(this);
    }
    return __classPrivateFieldGet(this, _Tokenizer_str, "f").substring(start, __classPrivateFieldGet(this, _Tokenizer_pos, "f").index);
}, _Tokenizer_curr = function _Tokenizer_curr() {
    return __classPrivateFieldGet(this, _Tokenizer_str, "f")[__classPrivateFieldGet(this, _Tokenizer_pos, "f").index];
}, _Tokenizer_prev = function _Tokenizer_prev() {
    return __classPrivateFieldGet(this, _Tokenizer_str, "f")[__classPrivateFieldGet(this, _Tokenizer_pos, "f").index - 1] ?? '';
}, _Tokenizer_peek = function _Tokenizer_peek() {
    return __classPrivateFieldGet(this, _Tokenizer_str, "f")[__classPrivateFieldGet(this, _Tokenizer_pos, "f").index + 1] ?? '';
}, _Tokenizer_mark = function _Tokenizer_mark() {
    __classPrivateFieldGet(this, _Tokenizer_markStack, "f").push({ ...__classPrivateFieldGet(this, _Tokenizer_pos, "f") });
}, _Tokenizer_reset = function _Tokenizer_reset() {
    const mark = __classPrivateFieldGet(this, _Tokenizer_markStack, "f").pop();
    if (!mark) {
        throw new Error('No mark to reset to');
    }
    __classPrivateFieldGet(this, _Tokenizer_pos, "f").index = mark.index;
    __classPrivateFieldGet(this, _Tokenizer_pos, "f").line = mark.line;
    __classPrivateFieldGet(this, _Tokenizer_pos, "f").column = mark.column;
}, _Tokenizer_advance = function _Tokenizer_advance() {
    __classPrivateFieldGet(this, _Tokenizer_pos, "f").index++;
    if (__classPrivateFieldGet(this, _Tokenizer_instances, "m", _Tokenizer_curr).call(this) === '\n') {
        __classPrivateFieldGet(this, _Tokenizer_pos, "f").line++;
        __classPrivateFieldGet(this, _Tokenizer_pos, "f").column = 0;
    }
    else {
        __classPrivateFieldGet(this, _Tokenizer_pos, "f").column++;
    }
}, _Tokenizer_buildToken = function _Tokenizer_buildToken(id, value) {
    const mark = __classPrivateFieldGet(this, _Tokenizer_markStack, "f").pop();
    if (!mark) {
        throw new Error('No mark for token');
    }
    return {
        id,
        value,
        ...mark,
    };
};
function isUnitToken(token) {
    if (token) {
        if (token.id === 'String') {
            return true;
        }
        if (token.id === 'Symbol' && STANDARD_UNITS.includes(token.value)) {
            return true;
        }
    }
    return false;
}

export { Tokenizer };
//# sourceMappingURL=tokenize.mjs.map
