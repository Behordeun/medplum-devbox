{"version":3,"file":"tokenize.mjs","sources":["../../../src/fhirlexer/tokenize.ts"],"sourcesContent":["export interface Marker {\n  index: number;\n  line: number;\n  column: number;\n}\n\nexport interface Token extends Marker {\n  id: string;\n  value: string;\n}\n\nconst STANDARD_UNITS = [\n  'year',\n  'years',\n  'month',\n  'months',\n  'week',\n  'weeks',\n  'day',\n  'days',\n  'hour',\n  'hours',\n  'minute',\n  'minutes',\n  'second',\n  'seconds',\n  'millisecond',\n  'milliseconds',\n];\n\nexport class Tokenizer {\n  readonly #str: string;\n  readonly #keywords: string[];\n  readonly #operators: string[];\n  readonly #result: Token[] = [];\n  readonly #pos: Marker = { index: 0, line: 1, column: 0 };\n  readonly #markStack: Marker[] = [];\n\n  constructor(str: string, keywords: string[], operators: string[]) {\n    this.#str = str;\n    this.#keywords = keywords;\n    this.#operators = operators;\n  }\n\n  tokenize(): Token[] {\n    while (this.#pos.index < this.#str.length) {\n      const token = this.#consumeToken();\n      if (token) {\n        this.#result.push(token);\n      }\n    }\n\n    return this.#result;\n  }\n\n  #prevToken(): Token | undefined {\n    return this.#result.slice(-1)[0];\n  }\n\n  #peekToken(): Token | undefined {\n    this.#mark();\n    const token = this.#consumeToken();\n    this.#reset();\n    return token;\n  }\n\n  #consumeToken(): Token | undefined {\n    this.#consumeWhitespace();\n\n    const c = this.#curr();\n    if (!c) {\n      return undefined;\n    }\n\n    this.#mark();\n\n    const next = this.#peek();\n\n    if (c === '/' && next === '*') {\n      return this.#consumeMultiLineComment();\n    }\n\n    if (c === '/' && next === '/') {\n      return this.#consumeSingleLineComment();\n    }\n\n    if (c === \"'\" || c === '\"') {\n      return this.#consumeString(c);\n    }\n\n    if (c === '`') {\n      return this.#consumeBacktickSymbol();\n    }\n\n    if (c === '@') {\n      return this.#consumeDateTime();\n    }\n\n    if (c.match(/\\d/)) {\n      return this.#consumeNumber();\n    }\n\n    if (c.match(/\\w/)) {\n      return this.#consumeSymbol();\n    }\n\n    if (c === '$' && next.match(/\\w/)) {\n      return this.#consumeSymbol();\n    }\n\n    return this.#consumeOperator();\n  }\n\n  #consumeWhitespace(): void {\n    this.#consumeWhile(() => this.#curr().match(/\\s/));\n  }\n\n  #consumeMultiLineComment(): Token {\n    const start = this.#pos.index;\n    this.#consumeWhile(() => this.#curr() !== '*' || this.#peek() !== '/');\n    this.#advance();\n    this.#advance();\n    return this.#buildToken('Comment', this.#str.substring(start, this.#pos.index));\n  }\n\n  #consumeSingleLineComment(): Token {\n    return this.#buildToken(\n      'Comment',\n      this.#consumeWhile(() => this.#curr() !== '\\n')\n    );\n  }\n\n  #consumeString(endChar: string): Token {\n    this.#advance();\n    const result = this.#buildToken(\n      'String',\n      this.#consumeWhile(() => this.#prev() === '\\\\' || this.#curr() !== endChar)\n    );\n    this.#advance();\n    return result;\n  }\n\n  #consumeBacktickSymbol(): Token {\n    this.#advance();\n    const result = this.#buildToken(\n      'Symbol',\n      this.#consumeWhile(() => this.#curr() !== '`')\n    );\n    this.#advance();\n    return result;\n  }\n\n  #consumeDateTime(): Token {\n    this.#advance(); // Consume \"@\"\n\n    const start = this.#pos.index;\n    this.#consumeWhile(() => this.#curr().match(/[\\d-]/));\n\n    if (this.#curr() === 'T') {\n      this.#advance();\n      this.#consumeWhile(() => this.#curr().match(/[\\d:]/));\n\n      if (this.#curr() === '.' && this.#peek().match(/\\d/)) {\n        this.#advance();\n        this.#consumeWhile(() => this.#curr().match(/\\d/));\n      }\n\n      if (this.#curr() === 'Z') {\n        this.#advance();\n      } else if (this.#curr() === '+' || this.#curr() === '-') {\n        this.#advance();\n        this.#consumeWhile(() => this.#curr().match(/[\\d:]/));\n      }\n    }\n\n    return this.#buildToken('DateTime', this.#str.substring(start, this.#pos.index));\n  }\n\n  #consumeNumber(): Token {\n    const start = this.#pos.index;\n    let id = 'Number';\n    this.#consumeWhile(() => this.#curr().match(/\\d/));\n\n    if (this.#curr() === '.' && this.#peek().match(/\\d/)) {\n      this.#advance();\n      this.#consumeWhile(() => this.#curr().match(/\\d/));\n    }\n\n    if (this.#curr() === ' ') {\n      if (isUnitToken(this.#peekToken())) {\n        id = 'Quantity';\n        this.#consumeToken();\n      }\n    }\n\n    return this.#buildToken(id, this.#str.substring(start, this.#pos.index));\n  }\n\n  #consumeSymbol(): Token {\n    const value = this.#consumeWhile(() => this.#curr().match(/[$\\w]/));\n    if (this.#prevToken()?.value !== '.' && this.#keywords.includes(value)) {\n      return this.#buildToken(value, value);\n    }\n    return this.#buildToken('Symbol', value);\n  }\n\n  #consumeOperator(): Token {\n    const c = this.#curr();\n    const next = this.#peek();\n    const twoCharOp = c + next;\n\n    if (this.#operators.includes(twoCharOp)) {\n      this.#advance();\n      this.#advance();\n      return this.#buildToken(twoCharOp, twoCharOp);\n    }\n\n    this.#advance();\n    return this.#buildToken(c, c);\n  }\n\n  #consumeWhile(condition: () => unknown): string {\n    const start = this.#pos.index;\n\n    while (this.#pos.index < this.#str.length && condition()) {\n      this.#advance();\n    }\n\n    return this.#str.substring(start, this.#pos.index);\n  }\n\n  #curr(): string {\n    return this.#str[this.#pos.index];\n  }\n\n  #prev(): string {\n    return this.#str[this.#pos.index - 1] ?? '';\n  }\n\n  #peek(): string {\n    return this.#str[this.#pos.index + 1] ?? '';\n  }\n\n  #mark(): void {\n    this.#markStack.push({ ...this.#pos });\n  }\n\n  #reset(): void {\n    const mark = this.#markStack.pop();\n    if (!mark) {\n      throw new Error('No mark to reset to');\n    }\n    this.#pos.index = mark.index;\n    this.#pos.line = mark.line;\n    this.#pos.column = mark.column;\n  }\n\n  #advance(): void {\n    this.#pos.index++;\n    if (this.#curr() === '\\n') {\n      this.#pos.line++;\n      this.#pos.column = 0;\n    } else {\n      this.#pos.column++;\n    }\n  }\n\n  #buildToken(id: string, value: string): Token {\n    const mark = this.#markStack.pop();\n    if (!mark) {\n      throw new Error('No mark for token');\n    }\n    return {\n      id,\n      value,\n      ...mark,\n    };\n  }\n}\n\nfunction isUnitToken(token: Token | undefined): boolean {\n  if (token) {\n    if (token.id === 'String') {\n      return true;\n    }\n\n    if (token.id === 'Symbol' && STANDARD_UNITS.includes(token.value)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"names":[],"mappings":"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"}