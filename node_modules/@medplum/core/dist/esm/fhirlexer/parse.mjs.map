{"version":3,"file":"parse.mjs","sources":["../../../src/fhirlexer/parse.ts"],"sourcesContent":["import { TypedValue } from '../types';\nimport { Token } from './tokenize';\n\nexport interface Atom {\n  eval(context: TypedValue[]): TypedValue[];\n}\n\nexport abstract class PrefixOperatorAtom implements Atom {\n  constructor(public readonly operator: string, public readonly child: Atom) {}\n\n  abstract eval(context: TypedValue[]): TypedValue[];\n\n  toString(): string {\n    return `${this.operator}(${this.child.toString()})`;\n  }\n}\n\nexport abstract class InfixOperatorAtom implements Atom {\n  constructor(public readonly operator: string, public readonly left: Atom, public readonly right: Atom) {}\n\n  abstract eval(context: TypedValue[]): TypedValue[];\n\n  toString(): string {\n    return `${this.left.toString()} ${this.operator} ${this.right.toString()}`;\n  }\n}\n\nexport interface PrefixParselet {\n  parse(parser: Parser, token: Token): Atom;\n}\n\nexport interface InfixParselet {\n  precedence: number;\n  parse?(parser: Parser, left: Atom, token: Token): Atom;\n}\n\nexport class ParserBuilder {\n  readonly #prefixParselets: Record<string, PrefixParselet> = {};\n  readonly #infixParselets: Record<string, InfixParselet> = {};\n\n  public registerInfix(tokenType: string, parselet: InfixParselet): ParserBuilder {\n    this.#infixParselets[tokenType] = parselet;\n    return this;\n  }\n\n  public registerPrefix(tokenType: string, parselet: PrefixParselet): ParserBuilder {\n    this.#prefixParselets[tokenType] = parselet;\n    return this;\n  }\n\n  public prefix(tokenType: string, precedence: number, builder: (token: Token, right: Atom) => Atom): ParserBuilder {\n    return this.registerPrefix(tokenType, {\n      parse(parser, token) {\n        const right = parser.consumeAndParse(precedence);\n        return builder(token, right);\n      },\n    });\n  }\n\n  public infixLeft(\n    tokenType: string,\n    precedence: number,\n    builder: (left: Atom, token: Token, right: Atom) => Atom\n  ): ParserBuilder {\n    return this.registerInfix(tokenType, {\n      parse(parser, left, token) {\n        const right = parser.consumeAndParse(precedence);\n        return builder(left, token, right);\n      },\n      precedence,\n    });\n  }\n\n  public construct(input: Token[]): Parser {\n    return new Parser(input, this.#prefixParselets, this.#infixParselets);\n  }\n}\n\nexport class Parser {\n  #tokens: Token[];\n  #prefixParselets: Record<string, PrefixParselet>;\n  #infixParselets: Record<string, InfixParselet>;\n\n  constructor(\n    tokens: Token[],\n    prefixParselets: Record<string, PrefixParselet>,\n    infixParselets: Record<string, InfixParselet>\n  ) {\n    this.#tokens = tokens;\n    this.#prefixParselets = prefixParselets;\n    this.#infixParselets = infixParselets;\n  }\n\n  hasMore(): boolean {\n    return this.#tokens.length > 0;\n  }\n\n  match(expected: string): boolean {\n    const token = this.peek();\n    if (token?.id !== expected) {\n      return false;\n    }\n\n    this.consume();\n    return true;\n  }\n\n  consumeAndParse(precedence = Infinity): Atom {\n    const token = this.consume();\n    const prefix = this.#prefixParselets[token.id];\n    if (!prefix) {\n      throw Error(\n        `Parse error at \"${token.value}\" (line ${token.line}, column ${token.column}). No matching prefix parselet.`\n      );\n    }\n\n    let left = prefix.parse(this, token);\n\n    while (precedence > this.getPrecedence()) {\n      const next = this.consume();\n      const infix = this.getInfixParselet(next) as InfixParselet;\n      left = (infix.parse as (parser: Parser, left: Atom, token: Token) => Atom)(this, left, next);\n    }\n\n    return left;\n  }\n\n  getPrecedence(): number {\n    const nextToken = this.peek();\n    if (!nextToken) {\n      return Infinity;\n    }\n    const parser = this.getInfixParselet(nextToken);\n    if (parser) {\n      return parser.precedence;\n    }\n    return Infinity;\n  }\n\n  consume(expectedId?: string, expectedValue?: string): Token {\n    if (!this.#tokens.length) {\n      throw Error('Cant consume unknown more tokens.');\n    }\n    if (expectedId && this.peek()?.id !== expectedId) {\n      const actual = this.peek() as Token;\n      throw Error(`Expected ${expectedId} but got \"${actual.id}\" at line ${actual.line} column ${actual.column}.`);\n    }\n    if (expectedValue && this.peek()?.value !== expectedValue) {\n      const actual = this.peek() as Token;\n      throw Error(\n        `Expected \"${expectedValue}\" but got \"${actual.value}\" at line ${actual.line} column ${actual.column}.`\n      );\n    }\n    return this.#tokens.shift() as Token;\n  }\n\n  peek(): Token | undefined {\n    return this.#tokens.length > 0 ? this.#tokens[0] : undefined;\n  }\n\n  removeComments(): void {\n    this.#tokens = this.#tokens.filter((t) => t.id !== 'Comment');\n  }\n\n  getInfixParselet(token: Token): InfixParselet | undefined {\n    return this.#infixParselets[token.id === 'Symbol' ? token.value : token.id];\n  }\n}\n"],"names":[],"mappings":"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"}