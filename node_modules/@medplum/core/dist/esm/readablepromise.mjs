import { __classPrivateFieldSet, __classPrivateFieldGet } from './node_modules/tslib/tslib.es6.mjs';

var _ReadablePromise_suspender, _ReadablePromise_status, _ReadablePromise_response, _ReadablePromise_error, _a;
/**
 * The ReadablePromise class wraps a request promise suitable for React Suspense.
 * See: https://blog.logrocket.com/react-suspense-data-fetching/#wrappromise-js
 * See: https://github.com/ovieokeh/suspense-data-fetching/blob/master/lib/api/wrapPromise.js
 */
class ReadablePromise {
    constructor(requestPromise) {
        this[_a] = 'ReadablePromise';
        _ReadablePromise_suspender.set(this, void 0);
        _ReadablePromise_status.set(this, 'pending');
        _ReadablePromise_response.set(this, void 0);
        _ReadablePromise_error.set(this, void 0);
        __classPrivateFieldSet(this, _ReadablePromise_suspender, requestPromise.then((res) => {
            __classPrivateFieldSet(this, _ReadablePromise_status, 'success', "f");
            __classPrivateFieldSet(this, _ReadablePromise_response, res, "f");
            return res;
        }, (err) => {
            __classPrivateFieldSet(this, _ReadablePromise_status, 'error', "f");
            __classPrivateFieldSet(this, _ReadablePromise_error, err, "f");
            throw err;
        }), "f");
    }
    /**
     * Returns true if the promise is pending.
     * @returns True if the Promise is pending.
     */
    isPending() {
        return __classPrivateFieldGet(this, _ReadablePromise_status, "f") === 'pending';
    }
    /**
     * Returns true if the promise resolved successfully.
     * @returns True if the Promise resolved successfully.
     */
    isOk() {
        return __classPrivateFieldGet(this, _ReadablePromise_status, "f") === 'success';
    }
    /**
     * Attempts to read the value of the promise.
     * If the promise is pending, this method will throw a promise.
     * If the promise rejected, this method will throw the rejection reason.
     * If the promise resolved, this method will return the resolved value.
     * @returns The resolved value of the Promise.
     */
    read() {
        switch (__classPrivateFieldGet(this, _ReadablePromise_status, "f")) {
            case 'pending':
                throw __classPrivateFieldGet(this, _ReadablePromise_suspender, "f");
            case 'error':
                throw __classPrivateFieldGet(this, _ReadablePromise_error, "f");
            default:
                return __classPrivateFieldGet(this, _ReadablePromise_response, "f");
        }
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        return __classPrivateFieldGet(this, _ReadablePromise_suspender, "f").then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        return __classPrivateFieldGet(this, _ReadablePromise_suspender, "f").catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        return __classPrivateFieldGet(this, _ReadablePromise_suspender, "f").finally(onfinally);
    }
}
_ReadablePromise_suspender = new WeakMap(), _ReadablePromise_status = new WeakMap(), _ReadablePromise_response = new WeakMap(), _ReadablePromise_error = new WeakMap(), _a = Symbol.toStringTag;

export { ReadablePromise };
//# sourceMappingURL=readablepromise.mjs.map
