import { __classPrivateFieldSet, __classPrivateFieldGet } from './node_modules/tslib/tslib.es6.mjs';
import { stringify } from './utils.mjs';

var _ClientStorage_storage, _MemoryStorage_data;
/**
 * The ClientStorage class is a utility class for storing strings and objects.
 *
 * When using MedplumClient in the browser, it will be backed by browser localStorage.
 *
 * When Using MedplumClient in the server, it will be backed by the MemoryStorage class.
 */
class ClientStorage {
    constructor() {
        _ClientStorage_storage.set(this, void 0);
        __classPrivateFieldSet(this, _ClientStorage_storage, typeof localStorage !== 'undefined' ? localStorage : new MemoryStorage(), "f");
    }
    clear() {
        __classPrivateFieldGet(this, _ClientStorage_storage, "f").clear();
    }
    getString(key) {
        return __classPrivateFieldGet(this, _ClientStorage_storage, "f").getItem(key) || undefined;
    }
    setString(key, value) {
        if (value) {
            __classPrivateFieldGet(this, _ClientStorage_storage, "f").setItem(key, value);
        }
        else {
            __classPrivateFieldGet(this, _ClientStorage_storage, "f").removeItem(key);
        }
    }
    getObject(key) {
        const str = this.getString(key);
        return str ? JSON.parse(str) : undefined;
    }
    setObject(key, value) {
        this.setString(key, value ? stringify(value) : undefined);
    }
}
_ClientStorage_storage = new WeakMap();
/**
 * The MemoryStorage class is a minimal in-memory implementation of the Storage interface.
 */
class MemoryStorage {
    constructor() {
        _MemoryStorage_data.set(this, void 0);
        __classPrivateFieldSet(this, _MemoryStorage_data, new Map(), "f");
    }
    /**
     * Returns the number of key/value pairs.
     */
    get length() {
        return __classPrivateFieldGet(this, _MemoryStorage_data, "f").size;
    }
    /**
     * Removes all key/value pairs, if there are any.
     */
    clear() {
        __classPrivateFieldGet(this, _MemoryStorage_data, "f").clear();
    }
    /**
     * Returns the current value associated with the given key, or null if the given key does not exist.
     */
    getItem(key) {
        return __classPrivateFieldGet(this, _MemoryStorage_data, "f").get(key) ?? null;
    }
    /**
     * Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.
     */
    setItem(key, value) {
        if (value) {
            __classPrivateFieldGet(this, _MemoryStorage_data, "f").set(key, value);
        }
        else {
            __classPrivateFieldGet(this, _MemoryStorage_data, "f").delete(key);
        }
    }
    /**
     * Removes the key/value pair with the given key, if a key/value pair with the given key exists.
     */
    removeItem(key) {
        __classPrivateFieldGet(this, _MemoryStorage_data, "f").delete(key);
    }
    /**
     * Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.
     */
    key(index) {
        return Array.from(__classPrivateFieldGet(this, _MemoryStorage_data, "f").keys())[index];
    }
}
_MemoryStorage_data = new WeakMap();

export { ClientStorage, MemoryStorage };
//# sourceMappingURL=storage.mjs.map
