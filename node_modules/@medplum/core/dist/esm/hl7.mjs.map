{"version":3,"file":"hl7.mjs","sources":["../../src/hl7.ts"],"sourcesContent":["import { isStringArray } from './utils';\n\n/**\n * The Hl7Context class represents the parsing context for an HL7 message.\n *\n * MSH-1:\n * https://hl7-definition.caristix.com/v2/HL7v2.6/Fields/MSH.1\n *\n * MSH-2:\n * https://hl7-definition.caristix.com/v2/HL7v2.6/Fields/MSH.2\n *\n * See this tutorial on MSH, and why it's a bad idea to use anything other than the default values:\n * https://www.hl7soup.com/HL7TutorialMSH.html\n */\nexport class Hl7Context {\n  constructor(\n    public readonly segmentSeparator = '\\r',\n    public readonly fieldSeparator = '|',\n    public readonly componentSeparator = '^',\n    public readonly repetitionSeparator = '~',\n    public readonly escapeCharacter = '\\\\',\n    public readonly subcomponentSeparator = '&'\n  ) {}\n\n  /**\n   * Returns the MSH-2 field value based on the configured separators.\n   * @returns The HL7 MSH-2 field value.\n   */\n  getMsh2(): string {\n    return (\n      this.fieldSeparator +\n      this.componentSeparator +\n      this.repetitionSeparator +\n      this.escapeCharacter +\n      this.subcomponentSeparator\n    );\n  }\n}\n\n/**\n * The Hl7Message class represents one HL7 message.\n * A message is a collection of segments.\n */\nexport class Hl7Message {\n  readonly context: Hl7Context;\n  readonly segments: Hl7Segment[];\n\n  /**\n   * Creates a new HL7 message.\n   * @param segments The HL7 segments.\n   * @param context Optional HL7 parsing context.\n   */\n  constructor(segments: Hl7Segment[], context = new Hl7Context()) {\n    this.context = context;\n    this.segments = segments;\n  }\n\n  /**\n   * Returns an HL7 segment by index or by name.\n   * @param index The HL7 segment index or name.\n   * @returns The HL7 segment if found; otherwise, undefined.\n   */\n  get(index: number | string): Hl7Segment | undefined {\n    if (typeof index === 'number') {\n      return this.segments[index];\n    }\n    return this.segments.find((s) => s.name === index);\n  }\n\n  /**\n   * Returns all HL7 segments of a given name.\n   * @param name The HL7 segment name.\n   * @returns An array of HL7 segments with the specified name.\n   */\n  getAll(name: string): Hl7Segment[] {\n    return this.segments.filter((s) => s.name === name);\n  }\n\n  /**\n   * Returns the HL7 message as a string.\n   * @returns The HL7 message as a string.\n   */\n  toString(): string {\n    return this.segments.map((s) => s.toString()).join(this.context.segmentSeparator);\n  }\n\n  /**\n   * Returns an HL7 \"ACK\" (acknowledgement) message for this message.\n   * @returns The HL7 \"ACK\" message.\n   */\n  buildAck(): Hl7Message {\n    const now = new Date();\n    const msh = this.get('MSH');\n    const sendingApp = msh?.get(2)?.toString() || '';\n    const sendingFacility = msh?.get(3)?.toString() || '';\n    const receivingApp = msh?.get(4)?.toString() || '';\n    const receivingFacility = msh?.get(5)?.toString() || '';\n    const controlId = msh?.get(9)?.toString() || '';\n    const versionId = msh?.get(12)?.toString() || '2.5.1';\n\n    return new Hl7Message([\n      new Hl7Segment(\n        [\n          'MSH',\n          this.context.getMsh2(),\n          receivingApp,\n          receivingFacility,\n          sendingApp,\n          sendingFacility,\n          now.toISOString(),\n          '',\n          'ACK',\n          now.getTime().toString(),\n          'P',\n          versionId,\n        ],\n        this.context\n      ),\n      new Hl7Segment(['MSA', 'AA', controlId, 'OK'], this.context),\n    ]);\n  }\n\n  /**\n   * Parses an HL7 message string into an Hl7Message object.\n   * @param text The HL7 message text.\n   * @returns The parsed HL7 message.\n   */\n  static parse(text: string): Hl7Message {\n    if (!text.startsWith('MSH')) {\n      const err = new Error('Invalid HL7 message');\n      (err as any).type = 'entity.parse.failed';\n      throw err;\n    }\n    const context = new Hl7Context(\n      '\\r',\n      text.charAt(3), // Field separator, recommended \"|\"\n      text.charAt(4), // Component separator, recommended \"^\"\n      text.charAt(5), // Repetition separator, recommended \"~\"\n      text.charAt(6), // Escape character, recommended \"\\\"\n      text.charAt(7) // Subcomponent separator, recommended \"&\"\n    );\n    return new Hl7Message(\n      text.split(/[\\r\\n]+/).map((line) => Hl7Segment.parse(line, context)),\n      context\n    );\n  }\n}\n\n/**\n * The Hl7Segment class represents one HL7 segment.\n * A segment is a collection of fields.\n * The name field is the first field.\n */\nexport class Hl7Segment {\n  readonly context: Hl7Context;\n  readonly name: string;\n  readonly fields: Hl7Field[];\n\n  /**\n   * Creates a new HL7 segment.\n   * @param fields The HL7 fields.\n   * @param context Optional HL7 parsing context.\n   */\n  constructor(fields: Hl7Field[] | string[], context = new Hl7Context()) {\n    this.context = context;\n    if (isStringArray(fields)) {\n      this.fields = fields.map((f) => Hl7Field.parse(f));\n    } else {\n      this.fields = fields;\n    }\n    this.name = this.fields[0].components[0][0];\n  }\n\n  /**\n   * Returns an HL7 field by index.\n   * @param index The HL7 field index.\n   * @returns The HL7 field.\n   */\n  get(index: number): Hl7Field {\n    return this.fields[index];\n  }\n\n  /**\n   * Returns the HL7 segment as a string.\n   * @returns The HL7 segment as a string.\n   */\n  toString(): string {\n    return this.fields.map((f) => f.toString()).join(this.context.fieldSeparator);\n  }\n\n  /**\n   * Parses an HL7 segment string into an Hl7Segment object.\n   * @param text The HL7 segment text.\n   * @param context Optional HL7 parsing context.\n   * @returns The parsed HL7 segment.\n   */\n  static parse(text: string, context = new Hl7Context()): Hl7Segment {\n    return new Hl7Segment(\n      text.split(context.fieldSeparator).map((f) => Hl7Field.parse(f, context)),\n      context\n    );\n  }\n}\n\n/**\n * The Hl7Field class represents one HL7 field.\n * A field is a collection of components.\n */\nexport class Hl7Field {\n  readonly context: Hl7Context;\n  readonly components: string[][];\n\n  /**\n   * Creates a new HL7 field.\n   * @param components The HL7 components.\n   * @param context Optional HL7 parsing context.\n   */\n  constructor(components: string[][], context = new Hl7Context()) {\n    this.context = context;\n    this.components = components;\n  }\n\n  /**\n   * Returns an HL7 component by index.\n   * @param component The component index.\n   * @param subcomponent Optional subcomponent index.\n   * @param repetition Optional repetition index.\n   * @returns The string value of the specified component.\n   */\n  get(component: number, subcomponent?: number, repetition = 0): string {\n    let value = this.components[repetition][component] || '';\n\n    if (subcomponent !== undefined) {\n      value = value.split(this.context.subcomponentSeparator)[subcomponent] || '';\n    }\n\n    return value;\n  }\n\n  /**\n   * Returns the HL7 field as a string.\n   * @returns The HL7 field as a string.\n   */\n  toString(): string {\n    return this.components.map((r) => r.join(this.context.componentSeparator)).join(this.context.repetitionSeparator);\n  }\n\n  /**\n   * Parses an HL7 field string into an Hl7Field object.\n   * @param text The HL7 field text.\n   * @param context Optional HL7 parsing context.\n   * @returns The parsed HL7 field.\n   */\n  static parse(text: string, context = new Hl7Context()): Hl7Field {\n    return new Hl7Field(\n      text.split(context.repetitionSeparator).map((r) => r.split(context.componentSeparator)),\n      context\n    );\n  }\n}\n"],"names":[],"mappings":"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"}