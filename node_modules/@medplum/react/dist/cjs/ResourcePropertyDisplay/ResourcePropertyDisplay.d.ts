/// <reference types="react" />
import { PropertyType, TypedValue } from '@medplum/core';
import { ElementDefinition } from '@medplum/fhirtypes';
export interface ResourcePropertyDisplayProps {
    property?: ElementDefinition;
    propertyType: PropertyType;
    value: any;
    arrayElement?: boolean;
    maxWidth?: number;
    ignoreMissingValues?: boolean;
    link?: boolean;
}
export declare function ResourcePropertyDisplay(props: ResourcePropertyDisplayProps): JSX.Element;
/**
 * Returns the value of the property and the property type.
 * Some property definitions support multiple types.
 * For example, "Observation.value[x]" can be "valueString", "valueInteger", "valueQuantity", etc.
 * According to the spec, there can only be one property for a given element definition.
 * This function returns the value and the type.
 * @param context The base context (usually a FHIR resource).
 * @param property The property definition.
 * @returns The value of the property and the property type.
 */
export declare function getValueAndType(context: TypedValue, path: string): [any, PropertyType];
