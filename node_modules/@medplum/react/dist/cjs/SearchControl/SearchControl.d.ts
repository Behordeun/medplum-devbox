import { SearchRequest } from '@medplum/core';
import { Bundle, Resource, UserConfiguration } from '@medplum/fhirtypes';
import React from 'react';
export declare class SearchChangeEvent extends Event {
    readonly definition: SearchRequest;
    constructor(definition: SearchRequest);
}
export declare class SearchLoadEvent extends Event {
    readonly response: Bundle;
    constructor(response: Bundle);
}
export declare class SearchClickEvent extends Event {
    readonly resource: Resource;
    readonly browserEvent: React.MouseEvent;
    constructor(resource: Resource, browserEvent: React.MouseEvent);
}
export interface SearchControlProps {
    search: SearchRequest;
    userConfig?: UserConfiguration;
    checkboxesEnabled?: boolean;
    hideToolbar?: boolean;
    hideFilters?: boolean;
    onLoad?: (e: SearchLoadEvent) => void;
    onChange?: (e: SearchChangeEvent) => void;
    onClick?: (e: SearchClickEvent) => void;
    onAuxClick?: (e: SearchClickEvent) => void;
    onNew?: () => void;
    onExport?: () => void;
    onDelete?: (ids: string[]) => void;
    onPatch?: (ids: string[]) => void;
    onBulk?: (ids: string[]) => void;
}
/**
 * The SearchControl component represents the embeddable search table control.
 * It includes the table, rows, headers, sorting, etc.
 * It does not include the field editor, filter editor, pagination buttons.
 */
export declare function SearchControl(props: SearchControlProps): JSX.Element;
export declare const MemoizedSearchControl: React.MemoExoticComponent<typeof SearchControl>;
