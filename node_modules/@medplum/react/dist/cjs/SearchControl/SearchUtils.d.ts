/// <reference types="react" />
import { Filter, Operator, SearchRequest } from '@medplum/core';
import { Resource, SearchParameter } from '@medplum/fhirtypes';
import { SearchControlField } from './SearchControlField';
/**
 * Sets the array of filters.
 *
 * @param {Array} filters The new filters.
 */
export declare function setFilters(definition: SearchRequest, filters: Filter[]): SearchRequest;
/**
 * Clears all of the filters.
 */
export declare function clearFilters(definition: SearchRequest): SearchRequest;
/**
 * Clears all of the filters on a certain field.
 *
 * @param {string} code The field key name to clear filters.
 */
export declare function clearFiltersOnField(definition: SearchRequest, code: string): SearchRequest;
/**
 * Adds a filter.
 *
 * @param {string} field The field key name.
 * @param {Operator} op The operation key name.
 * @param {?string} value The filter value.
 * @param {boolean=} opt_clear Optional flag to clear filters on the field.
 */
export declare function addFilter(definition: SearchRequest, field: string, op: Operator, value?: string, opt_clear?: boolean): SearchRequest;
/**
 * Adds a field.
 *
 * @param {string} field The field key name.
 */
export declare function addField(definition: SearchRequest, field: string): SearchRequest;
/**
 * Deletes a filter at the specified index.
 *
 * @param {number} index The filter index.
 */
export declare function deleteFilter(definition: SearchRequest, index: number): SearchRequest;
/**
 * Adds a filter that constrains the specified field to "yesterday".
 *
 * @param {string} field The field key name.
 */
export declare function addYesterdayFilter(definition: SearchRequest, field: string): SearchRequest;
/**
 * Adds a filter that constrains the specified field to "today".
 *
 * @param {string} field The field key name.
 */
export declare function addTodayFilter(definition: SearchRequest, field: string): SearchRequest;
/**
 * Adds a filter that constrains the specified field to "tomorrow".
 *
 * @param {string} field The field key name.
 */
export declare function addTomorrowFilter(definition: SearchRequest, field: string): SearchRequest;
/**
 * Adds a filter that constrains the specified field to "last month".
 *
 * @param {string} field The field key name.
 */
export declare function addLastMonthFilter(definition: SearchRequest, field: string): SearchRequest;
/**
 * Adds a filter that constrains the specified field to "this month".
 *
 * @param {string} field The field key name.
 */
export declare function addThisMonthFilter(definition: SearchRequest, field: string): SearchRequest;
/**
 * Adds a filter that constrains the specified field to "next month".
 *
 * @param {string} field The field key name.
 */
export declare function addNextMonthFilter(definition: SearchRequest, field: string): SearchRequest;
/**
 * Adds a filter that constrains the specified field to the year to date.
 *
 * @param {string} field The field key name.
 */
export declare function addYearToDateFilter(definition: SearchRequest, field: string): SearchRequest;
/**
 * Adds a filter for a date between two dates (inclusive of both dates).
 *
 * @param {string} field The field key name.
 * @param {Date} d1 The start date.
 * @param {Date} d2 The end date.
 */
export declare function addDateFilterBetween(definition: SearchRequest, field: string, d1: Date, d2: Date): SearchRequest;
/**
 * Adds a filter that constrains the specified field to "missing".
 *
 * @param {string} field The field key name.
 */
export declare function addMissingFilter(definition: SearchRequest, field: string, value?: boolean): SearchRequest;
/**
 * Sets the offset (starting at zero).
 *
 * @param {number} offset The offset number.
 */
export declare function setOffset(definition: SearchRequest, offset: number): SearchRequest;
/**
 * Creates a new search request with the search offset at the specified page.
 * @param definition The search definition.
 * @param page The new page number
 * @return The new search definition.
 */
export declare function setPage(definition: SearchRequest, page: number): SearchRequest;
/**
 * Sorts the search by the specified key, and optional direction.
 * Direction defaults to ascending ('asc') if not specified.
 *
 * @param {string} sortField The sort key.
 */
export declare function setSort(definition: SearchRequest, sort: string, desc?: boolean): SearchRequest;
/**
 * Toggles the sort of the search by key.
 * If the search is already sorted by the key, reverses the direction.
 * If the search is not sorted by the key, sort in ascending order.
 *
 * @param {string} key The field key name.
 */
export declare function toggleSort(definition: SearchRequest, key: string): SearchRequest;
export declare function getSortField(definition: SearchRequest): string | undefined;
export declare function isSortDescending(definition: SearchRequest): boolean;
/**
 * Returns a list of operators for a search parameter.
 * @param searchParam The search parameter.
 * @returns The list of operators that can be used for the search parameter.
 */
export declare function getSearchOperators(searchParam: SearchParameter): Operator[] | undefined;
/**
 * Returns a string representing the operation.
 *
 * @param {string} op The operation code.
 * @return {string} A display string for the operation.
 */
export declare function getOpString(op: Operator): string;
/**
 * Returns a field display name.
 * @param key The field key.
 * @returns The field display name.
 */
export declare function buildFieldNameString(key: string): string;
/**
 * Returns a fragment to be displayed in the search table for the value.
 * @param resource The parent resource.
 * @param key The search code or FHIRPath expression.
 * @returns The fragment to display.
 */
export declare function renderValue(resource: Resource, field: SearchControlField): string | JSX.Element | null | undefined;
