import { Stack } from '@mantine/core';
import { globalSchema, getPropertyDisplayName } from '@medplum/core';
import React, { useState } from 'react';
import { CheckboxFormSection } from '../CheckboxFormSection/CheckboxFormSection.mjs';
import { DEFAULT_IGNORED_PROPERTIES } from '../constants.mjs';
import { FormSection } from '../FormSection/FormSection.mjs';
import { setPropertyValue } from '../ResourceForm/ResourceForm.mjs';
import { getValueAndType } from '../ResourcePropertyDisplay/ResourcePropertyDisplay.mjs';
import { ResourcePropertyInput } from '../ResourcePropertyInput/ResourcePropertyInput.mjs';

function BackboneElementInput(props) {
    const [value, setValue] = useState(props.defaultValue ?? {});
    function setValueWrapper(newValue) {
        setValue(newValue);
        if (props.onChange) {
            props.onChange(newValue);
        }
    }
    const typeName = props.typeName;
    const typeSchema = globalSchema.types[typeName];
    if (!typeSchema) {
        return React.createElement("div", null,
            typeName,
            "\u00A0not implemented");
    }
    const typedValue = { type: typeName, value };
    return (React.createElement(Stack, null, Object.entries(typeSchema.properties).map((entry) => {
        const key = entry[0];
        if (key === 'id' || DEFAULT_IGNORED_PROPERTIES.indexOf(key) >= 0) {
            return null;
        }
        const property = entry[1];
        if (!property.type) {
            return null;
        }
        const [propertyValue, propertyType] = getValueAndType(typedValue, key);
        if (property.type.length === 1 && property.type[0].code === 'boolean') {
            return (React.createElement(CheckboxFormSection, { key: key, title: getPropertyDisplayName(key), description: property.definition, htmlFor: key },
                React.createElement(ResourcePropertyInput, { property: property, name: key, defaultValue: propertyValue, defaultPropertyType: propertyType, outcome: props.outcome, onChange: (newValue, propName) => {
                        setValueWrapper(setPropertyValue(value, key, propName ?? key, entry[1], newValue));
                    } })));
        }
        return (React.createElement(FormSection, { key: key, title: getPropertyDisplayName(key), description: property.definition, htmlFor: key, outcome: props.outcome },
            React.createElement(ResourcePropertyInput, { property: property, name: key, defaultValue: propertyValue, defaultPropertyType: propertyType, outcome: props.outcome, onChange: (newValue, propName) => {
                    setValueWrapper(setPropertyValue(value, key, propName ?? key, entry[1], newValue));
                } })));
    })));
}

export { BackboneElementInput };
//# sourceMappingURL=BackboneElementInput.mjs.map
