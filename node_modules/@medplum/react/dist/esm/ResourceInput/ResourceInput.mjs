import { Group, Text, Autocomplete, Loader } from '@mantine/core';
import { getDisplayString } from '@medplum/core';
import React, { forwardRef, useState, useEffect } from 'react';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';
import { ResourceAvatar } from '../ResourceAvatar/ResourceAvatar.mjs';
import { useResource } from '../useResource/useResource.mjs';

/**
 * Defines which search parameters will be used by the type ahead to search for each resourceType
 */
const SEARCH_CODES = {
    Schedule: '_id',
    Task: '_id',
    Patient: 'name',
    Practitioner: 'name',
    Questionnaire: 'name',
    ServiceRequest: '_id',
    DiagnosticReport: '_id',
    Specimen: '_id',
    Observation: 'code',
    RequestGroup: '_id',
    ActivityDefinition: 'name',
    User: 'email:contains',
};
function ResourceInput(props) {
    const medplum = useMedplum();
    const defaultValue = useResource(props.defaultValue);
    const [value, setValue] = useState(defaultValue ? getDisplayString(defaultValue) : '');
    const [loading, setLoading] = useState(false);
    const [data, setData] = useState([]);
    useEffect(() => {
        if (defaultValue) {
            setValue(getDisplayString(defaultValue));
        }
    }, [defaultValue, setValue]);
    async function loadValues(input) {
        setLoading(true);
        const searchCode = SEARCH_CODES[props.resourceType] || 'name';
        const searchParams = new URLSearchParams({
            [searchCode]: input,
            _count: '10',
        });
        const resources = await medplum.searchResources(props.resourceType, searchParams);
        setData(resources.map((resource) => ({ value: getDisplayString(resource), resource })));
        setLoading(false);
    }
    async function handleChange(val) {
        setValue(val);
        return loadValues(val);
    }
    function handleSelect(item) {
        setValue(item.value);
        setData([]);
        if (props.onChange) {
            props.onChange(item.resource);
        }
    }
    return (React.createElement(Autocomplete, { itemComponent: ItemComponent, value: value, data: data, placeholder: props.placeholder, onFocus: () => loadValues(value), onChange: handleChange, onItemSubmit: handleSelect, rightSection: loading ? React.createElement(Loader, { size: 16 }) : null }));
}
const ItemComponent = forwardRef(({ value, resource, ...others }, ref) => {
    return (React.createElement("div", { ref: ref, ...others },
        React.createElement(Group, { noWrap: true },
            React.createElement(ResourceAvatar, { value: resource }),
            React.createElement("div", null,
                React.createElement(Text, null, value),
                React.createElement(Text, { size: "xs", color: "dimmed" }, resource.birthDate)))));
});

export { ResourceInput };
//# sourceMappingURL=ResourceInput.mjs.map
