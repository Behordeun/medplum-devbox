import { Group, NativeSelect, TextInput } from '@mantine/core';
import React, { useState } from 'react';

function QuantityInput(props) {
    const [value, setValue] = useState(props.defaultValue);
    function setValueWrapper(newValue) {
        setValue(newValue);
        if (props.onChange) {
            props.onChange(newValue);
        }
    }
    return (React.createElement(Group, { spacing: "xs", grow: true, noWrap: true },
        React.createElement(NativeSelect, { style: { width: 80 }, "data-testid": props.name + '-comparator', defaultValue: value?.comparator, data: ['', '<', '<=', '>=', '>'], onChange: (e) => setValueWrapper({
                ...value,
                comparator: e.currentTarget.value,
            }) }),
        React.createElement(TextInput, { id: props.name, name: props.name, "data-testid": props.name + '-value', type: "number", step: "any", placeholder: "Value", defaultValue: value?.value?.toString(), onChange: (e) => setValueWrapper({
                ...value,
                value: tryParseNumber(e.currentTarget.value),
            }) }),
        React.createElement(TextInput, { placeholder: "Unit", "data-testid": props.name + '-unit', defaultValue: value?.unit, onChange: (e) => setValueWrapper({
                ...value,
                unit: e.currentTarget.value,
            }) })));
}
function tryParseNumber(str) {
    if (!str) {
        return undefined;
    }
    return parseFloat(str);
}

export { QuantityInput };
//# sourceMappingURL=QuantityInput.mjs.map
