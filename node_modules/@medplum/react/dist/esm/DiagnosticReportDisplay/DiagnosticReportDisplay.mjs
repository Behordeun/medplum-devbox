import { createStyles, Stack, Title, Group, Text } from '@mantine/core';
import { formatDateTime, capitalize, formatObservationValue } from '@medplum/core';
import React from 'react';
import { CodeableConceptDisplay } from '../CodeableConceptDisplay/CodeableConceptDisplay.mjs';
import { MedplumLink } from '../MedplumLink/MedplumLink.mjs';
import { RangeDisplay } from '../RangeDisplay/RangeDisplay.mjs';
import { ResourceBadge } from '../ResourceBadge/ResourceBadge.mjs';
import { StatusBadge } from '../StatusBadge/StatusBadge.mjs';
import { useResource } from '../useResource/useResource.mjs';

const useStyles = createStyles((theme) => ({
    table: {
        border: `0.1px solid ${theme.colors.gray[5]}`,
        borderCollapse: 'collapse',
        '& td, & th': {
            border: `0.1px solid ${theme.colors.gray[5]}`,
            padding: 4,
        },
    },
    criticalRow: {
        background: theme.colorScheme === 'dark' ? theme.colors.red[7] : theme.colors.red[1],
        border: `0.1px solid ${theme.colors.red[5]}`,
        color: theme.colors.red[5],
        fontWeight: 500,
        '& td': {
            border: `0.1px solid ${theme.colors.red[5]}`,
        },
    },
}));
function DiagnosticReportDisplay(props) {
    const diagnosticReport = useResource(props.value);
    const specimen = useResource(diagnosticReport?.specimen?.[0]);
    if (!diagnosticReport) {
        return null;
    }
    let textContent = '';
    if (diagnosticReport.presentedForm && diagnosticReport.presentedForm.length > 0) {
        const pf = diagnosticReport.presentedForm[0];
        if (pf.contentType?.startsWith('text/plain') && pf.data) {
            textContent = window.atob(pf.data);
        }
    }
    if (specimen?.note) {
        for (const note of specimen.note) {
            textContent += note.text + '\n\n';
        }
    }
    return (React.createElement(Stack, null,
        React.createElement(Title, null, "Diagnostic Report"),
        React.createElement(Group, { mt: "md", spacing: 30 },
            diagnosticReport.subject && (React.createElement("div", null,
                React.createElement(Text, { size: "xs", transform: "uppercase", color: "dimmed" }, "Subject"),
                React.createElement(Text, null,
                    React.createElement(ResourceBadge, { value: diagnosticReport.subject, link: true })))),
            diagnosticReport.resultsInterpreter &&
                diagnosticReport.resultsInterpreter.map((interpreter) => (React.createElement("div", { key: interpreter.reference },
                    React.createElement(Text, { size: "xs", transform: "uppercase", color: "dimmed" }, "Interpreter"),
                    React.createElement(Text, null,
                        React.createElement(ResourceBadge, { value: interpreter, link: true }))))),
            diagnosticReport.issued && (React.createElement("div", null,
                React.createElement(Text, { size: "xs", transform: "uppercase", color: "dimmed" }, "Issued"),
                React.createElement(Text, null, formatDateTime(diagnosticReport.issued)))),
            diagnosticReport.status && (React.createElement("div", null,
                React.createElement(Text, { size: "xs", transform: "uppercase", color: "dimmed" }, "Status"),
                React.createElement(Text, null, capitalize(diagnosticReport.status))))),
        diagnosticReport.result && React.createElement(ObservationTable, { value: diagnosticReport.result }),
        textContent && React.createElement("pre", null, textContent.trim())));
}
function ObservationTable(props) {
    const { classes } = useStyles();
    return (React.createElement("table", { className: classes.table },
        React.createElement("thead", null,
            React.createElement("tr", null,
                React.createElement("th", null, "Test"),
                React.createElement("th", null, "Value"),
                React.createElement("th", null, "Reference Range"),
                React.createElement("th", null, "Interpretation"),
                React.createElement("th", null, "Category"),
                React.createElement("th", null, "Status"))),
        React.createElement("tbody", null, props.value?.map((observation, index) => (React.createElement(ObservationRow, { key: 'obs-' + index, value: observation }))))));
}
function ObservationRow(props) {
    const { classes, cx } = useStyles();
    const observation = useResource(props.value);
    if (!observation) {
        return null;
    }
    const critical = isCritical(observation);
    return (React.createElement("tr", { className: cx({ [classes.criticalRow]: critical }) },
        React.createElement("td", null,
            React.createElement(MedplumLink, { to: observation },
                React.createElement(CodeableConceptDisplay, { value: observation.code }))),
        React.createElement("td", null,
            React.createElement(ObservationValueDisplay, { value: observation })),
        React.createElement("td", null,
            React.createElement(ReferenceRangeDisplay, { value: observation.referenceRange })),
        React.createElement("td", null, observation.interpretation && observation.interpretation.length > 0 && (React.createElement(CodeableConceptDisplay, { value: observation.interpretation[0] }))),
        React.createElement("td", null, observation.category && observation.category.length > 0 && (React.createElement("ul", null, observation.category.map((concept, index) => (React.createElement("li", { key: `category-${index}` },
            React.createElement(CodeableConceptDisplay, { value: concept }))))))),
        React.createElement("td", null, observation.status && React.createElement(StatusBadge, { status: observation.status }))));
}
function ObservationValueDisplay(props) {
    const obs = props.value;
    return React.createElement(React.Fragment, null, formatObservationValue(obs));
}
function ReferenceRangeDisplay(props) {
    const range = props.value && props.value.length > 0 && props.value[0];
    if (!range) {
        return null;
    }
    if (range.text) {
        return React.createElement(React.Fragment, null, range.text);
    }
    return React.createElement(RangeDisplay, { value: range });
}
/**
 * Returns true if the observation is critical.
 * See: https://www.hl7.org/fhir/valueset-observation-interpretation.html
 * @param observation The FHIR observation.
 * @returns True if the FHIR observation is a critical value.
 */
function isCritical(observation) {
    const code = observation.interpretation?.[0]?.coding?.[0]?.code;
    return code === 'AA' || code === 'LL' || code === 'HH' || code === 'A';
}

export { DiagnosticReportDisplay, ObservationTable };
//# sourceMappingURL=DiagnosticReportDisplay.mjs.map
