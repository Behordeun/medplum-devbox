import { Group, NativeSelect, TextInput } from '@mantine/core';
import React, { useState, useRef } from 'react';

function ContactPointInput(props) {
    const [contactPoint, setContactPoint] = useState(props.defaultValue);
    const ref = useRef();
    ref.current = contactPoint;
    function setContactPointWrapper(newValue) {
        if (newValue && Object.keys(newValue).length === 0) {
            newValue = undefined;
        }
        setContactPoint(newValue);
        if (props.onChange) {
            props.onChange(newValue);
        }
    }
    function setSystem(system) {
        const newValue = { ...ref.current, system };
        if (!system) {
            delete newValue.system;
        }
        setContactPointWrapper(newValue);
    }
    function setUse(use) {
        const newValue = { ...ref.current, use };
        if (!use) {
            delete newValue.use;
        }
        setContactPointWrapper(newValue);
    }
    function setValue(value) {
        const newValue = { ...ref.current, value };
        if (!value) {
            delete newValue.value;
        }
        setContactPointWrapper(newValue);
    }
    return (React.createElement(Group, { spacing: "xs", grow: true, noWrap: true },
        React.createElement(NativeSelect, { "data-testid": "system", defaultValue: contactPoint?.system, onChange: (e) => setSystem(e.currentTarget.value), data: ['', 'email', 'phone', 'fax', 'pager', 'sms', 'other'] }),
        React.createElement(NativeSelect, { "data-testid": "use", defaultValue: contactPoint?.use, onChange: (e) => setUse(e.currentTarget.value), data: ['', 'home', 'work', 'temp', 'old', 'mobile'] }),
        React.createElement(TextInput, { placeholder: "Value", defaultValue: contactPoint?.value, onChange: (e) => setValue(e.currentTarget.value) })));
}

export { ContactPointInput };
//# sourceMappingURL=ContactPointInput.mjs.map
