import { Loader, Table, Button } from '@mantine/core';
import React, { useState, useRef, useEffect } from 'react';
import { FhirPathDisplay } from '../FhirPathDisplay/FhirPathDisplay.mjs';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';
import { SearchClickEvent } from '../SearchControl/SearchControl.mjs';
import { killEvent, isCheckboxCell } from '../utils/dom.mjs';

/**
 * The FhirPathTable component represents the embeddable search table control.
 */
function FhirPathTable(props) {
    const medplum = useMedplum();
    const [schema, setSchema] = useState();
    const [outcome, setOutcome] = useState();
    const { query, fields } = props;
    const [response, setResponse] = useState();
    const [selected, setSelected] = useState({});
    const responseRef = useRef();
    responseRef.current = response;
    const selectedRef = useRef({});
    selectedRef.current = selected;
    useEffect(() => {
        setOutcome(undefined);
        medplum.graphql(query).then(setResponse).catch(setOutcome);
    }, [medplum, query]);
    function handleSingleCheckboxClick(e, id) {
        e.stopPropagation();
        const el = e.target;
        const checked = el.checked;
        const newSelected = { ...selectedRef.current };
        if (checked) {
            newSelected[id] = true;
        }
        else {
            delete newSelected[id];
        }
        setSelected(newSelected);
    }
    function handleAllCheckboxClick(e) {
        e.stopPropagation();
        const el = e.target;
        const checked = el.checked;
        const newSelected = {};
        const resources = responseRef.current?.data?.ResourceList;
        if (checked && resources) {
            resources.forEach((resource) => {
                if (resource?.id) {
                    newSelected[resource.id] = true;
                }
            });
        }
        setSelected(newSelected);
    }
    function isAllSelected() {
        const resources = responseRef.current?.data?.ResourceList;
        if (!resources || resources.length === 0) {
            return false;
        }
        for (const resource of resources) {
            if (resource?.id && !selectedRef.current[resource.id]) {
                return false;
            }
        }
        return true;
    }
    function handleRowClick(e, resource) {
        if (isCheckboxCell(e.target)) {
            // Ignore clicks on checkboxes
            return;
        }
        killEvent(e);
        if (e.button !== 1 && props.onClick) {
            props.onClick(new SearchClickEvent(resource, e));
        }
        if (e.button === 1 && props.onAuxClick) {
            props.onAuxClick(new SearchClickEvent(resource, e));
        }
    }
    useEffect(() => {
        medplum
            .requestSchema(props.resourceType)
            .then((newSchema) => {
            // The schema could have the same object identity,
            // so need to use the spread operator to kick React re-render.
            setSchema({ ...newSchema });
        })
            .catch(console.log);
    }, [medplum, props.resourceType]);
    const typeSchema = schema?.types?.[props.resourceType];
    if (!typeSchema) {
        return React.createElement(Loader, null);
    }
    const checkboxColumn = props.checkboxesEnabled;
    return (React.createElement("div", { onContextMenu: (e) => killEvent(e), "data-testid": "search-control" },
        React.createElement(Table, null,
            React.createElement("thead", null,
                React.createElement("tr", null,
                    checkboxColumn && (React.createElement("th", null,
                        React.createElement("input", { type: "checkbox", value: "checked", "aria-label": "all-checkbox", "data-testid": "all-checkbox", checked: isAllSelected(), onChange: (e) => handleAllCheckboxClick(e) }))),
                    fields.map((field) => (React.createElement("th", { key: field.name }, field.name))))),
            React.createElement("tbody", null, response?.data?.ResourceList?.map((resource) => resource && (React.createElement("tr", { key: resource.id, "data-testid": "search-control-row", onClick: (e) => handleRowClick(e, resource), onAuxClick: (e) => handleRowClick(e, resource) },
                checkboxColumn && (React.createElement("td", null,
                    React.createElement("input", { type: "checkbox", value: "checked", "data-testid": "row-checkbox", "aria-label": `Checkbox for ${resource.id}`, checked: !!selected[resource.id], onChange: (e) => handleSingleCheckboxClick(e, resource.id) }))),
                fields.map((field) => {
                    return (React.createElement("td", { key: field.name },
                        React.createElement(FhirPathDisplay, { propertyType: field.propertyType, path: field.fhirPath, resource: resource })));
                })))))),
        response?.data?.ResourceList?.length === 0 && React.createElement("div", { "data-testid": "empty-search" }, "No results"),
        outcome && (React.createElement("div", { "data-testid": "search-error" },
            React.createElement("pre", { style: { textAlign: 'left' } }, JSON.stringify(outcome, undefined, 2)))),
        props.onBulk && (React.createElement(Button, { onClick: () => props.onBulk(Object.keys(selectedRef.current)) }, "Bulk..."))));
}
const MemoizedFhirPathTable = React.memo(FhirPathTable);

export { FhirPathTable, MemoizedFhirPathTable };
//# sourceMappingURL=FhirPathTable.mjs.map
