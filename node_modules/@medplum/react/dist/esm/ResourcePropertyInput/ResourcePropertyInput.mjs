import { Group, NativeSelect, Textarea, Checkbox, TextInput } from '@mantine/core';
import { capitalize, buildTypeName, PropertyType } from '@medplum/core';
import React, { useState } from 'react';
import { AddressInput } from '../AddressInput/AddressInput.mjs';
import { AnnotationInput } from '../AnnotationInput/AnnotationInput.mjs';
import { AttachmentArrayInput } from '../AttachmentArrayInput/AttachmentArrayInput.mjs';
import { AttachmentInput } from '../AttachmentInput/AttachmentInput.mjs';
import { BackboneElementInput } from '../BackboneElementInput/BackboneElementInput.mjs';
import { CodeableConceptInput } from '../CodeableConceptInput/CodeableConceptInput.mjs';
import { CodeInput } from '../CodeInput/CodeInput.mjs';
import { CodingInput } from '../CodingInput/CodingInput.mjs';
import { ContactDetailInput } from '../ContactDetailInput/ContactDetailInput.mjs';
import { ContactPointInput } from '../ContactPointInput/ContactPointInput.mjs';
import { DateTimeInput } from '../DateTimeInput/DateTimeInput.mjs';
import { ExtensionInput } from '../ExtensionInput/ExtensionInput.mjs';
import { HumanNameInput } from '../HumanNameInput/HumanNameInput.mjs';
import { IdentifierInput } from '../IdentifierInput/IdentifierInput.mjs';
import { MoneyInput } from '../MoneyInput/MoneyInput.mjs';
import { PeriodInput } from '../PeriodInput/PeriodInput.mjs';
import { QuantityInput } from '../QuantityInput/QuantityInput.mjs';
import { RangeInput } from '../RangeInput/RangeInput.mjs';
import { RatioInput } from '../RatioInput/RatioInput.mjs';
import { ReferenceInput } from '../ReferenceInput/ReferenceInput.mjs';
import { ResourceArrayInput } from '../ResourceArrayInput/ResourceArrayInput.mjs';
import { TimingInput } from '../TimingInput/TimingInput.mjs';
import { getErrorsForInput } from '../utils/outcomes.mjs';

function ResourcePropertyInput(props) {
    const property = props.property;
    const propertyType = props.defaultPropertyType ?? property.type?.[0]?.code;
    const name = props.name;
    const value = props.defaultValue;
    if (property.max === '*' && !props.arrayElement) {
        if (propertyType === 'Attachment') {
            return React.createElement(AttachmentArrayInput, { name: name, defaultValue: value, onChange: props.onChange });
        }
        return React.createElement(ResourceArrayInput, { property: property, name: name, defaultValue: value, onChange: props.onChange });
    }
    const propertyTypes = property.type;
    if (propertyTypes.length > 1) {
        return React.createElement(ElementDefinitionInputSelector, { elementDefinitionTypes: propertyTypes, ...props });
    }
    else {
        return React.createElement(ElementDefinitionTypeInput, { elementDefinitionType: propertyTypes[0], ...props });
    }
}
function ElementDefinitionInputSelector(props) {
    const propertyTypes = props.elementDefinitionTypes;
    let initialPropertyType = undefined;
    if (props.defaultPropertyType) {
        initialPropertyType = propertyTypes.find((t) => t.code === props.defaultPropertyType);
    }
    if (!initialPropertyType) {
        initialPropertyType = propertyTypes[0];
    }
    const [selectedType, setSelectedType] = useState(initialPropertyType);
    return (React.createElement(Group, { spacing: "xs", grow: true, noWrap: true },
        React.createElement(NativeSelect, { style: { width: '200px' }, defaultValue: selectedType?.code, onChange: (e) => {
                setSelectedType(propertyTypes.find((type) => type.code === e.currentTarget.value));
            }, data: propertyTypes.map((type) => ({
                value: type.code,
                label: type.code,
            })) }),
        React.createElement(ElementDefinitionTypeInput, { ...props, elementDefinitionType: selectedType, onChange: (newValue) => {
                if (props.onChange) {
                    props.onChange(newValue, props.name.replace('[x]', capitalize(selectedType.code)));
                }
            } })));
}
function ElementDefinitionTypeInput(props) {
    const property = props.property;
    const propertyType = props.elementDefinitionType.code;
    const name = props.name;
    const value = props.defaultValue;
    switch (propertyType) {
        // 2.24.0.1 Primitive Types
        // https://www.hl7.org/fhir/datatypes.html#primitive
        case PropertyType.SystemString:
        case PropertyType.canonical:
        case PropertyType.string:
        case PropertyType.time:
        case PropertyType.uri:
        case PropertyType.url:
            return (React.createElement(TextInput, { id: name, name: name, "data-testid": name, defaultValue: value, onChange: (e) => {
                    if (props.onChange) {
                        props.onChange(e.currentTarget.value);
                    }
                }, error: getErrorsForInput(props.outcome, name) }));
        case PropertyType.date:
            return (React.createElement(TextInput, { type: "date", id: name, name: name, "data-testid": name, defaultValue: value, onChange: (e) => {
                    if (props.onChange) {
                        props.onChange(e.currentTarget.value);
                    }
                }, error: getErrorsForInput(props.outcome, name) }));
        case PropertyType.dateTime:
        case PropertyType.instant:
            return React.createElement(DateTimeInput, { name: name, defaultValue: value, onChange: props.onChange, outcome: props.outcome });
        case PropertyType.decimal:
        case PropertyType.integer:
        case PropertyType.positiveInt:
        case PropertyType.unsignedInt:
            return (React.createElement(TextInput, { type: "number", step: propertyType === PropertyType.decimal ? 'any' : '1', id: name, name: name, "data-testid": name, defaultValue: value, onChange: (e) => {
                    if (props.onChange) {
                        props.onChange(e.currentTarget.valueAsNumber);
                    }
                } }));
        case PropertyType.code:
            return React.createElement(CodeInput, { property: property, name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.boolean:
            return (React.createElement(Checkbox, { id: name, name: name, "data-testid": name, defaultChecked: !!value, onChange: (e) => {
                    if (props.onChange) {
                        props.onChange(e.currentTarget.checked);
                    }
                } }));
        case PropertyType.markdown:
            return (React.createElement(Textarea, { id: name, name: name, "data-testid": name, defaultValue: value, onChange: (e) => {
                    if (props.onChange) {
                        props.onChange(e.currentTarget.value);
                    }
                } }));
        // 2.24.0.2 Complex Types
        // https://www.hl7.org/fhir/datatypes.html#complex
        case PropertyType.Address:
            return React.createElement(AddressInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Annotation:
            return React.createElement(AnnotationInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Attachment:
            return React.createElement(AttachmentInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.CodeableConcept:
            return React.createElement(CodeableConceptInput, { property: property, name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Coding:
            return React.createElement(CodingInput, { property: property, name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.ContactDetail:
            return React.createElement(ContactDetailInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.ContactPoint:
            return React.createElement(ContactPointInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Extension:
            return React.createElement(ExtensionInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.HumanName:
            return React.createElement(HumanNameInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Identifier:
            return React.createElement(IdentifierInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Money:
            return React.createElement(MoneyInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Period:
            return React.createElement(PeriodInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Duration:
        case PropertyType.Quantity:
            return React.createElement(QuantityInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Range:
            return React.createElement(RangeInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Ratio:
            return React.createElement(RatioInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Reference:
            return (React.createElement(ReferenceInput, { name: name, defaultValue: value, targetTypes: getTargetTypes(property), onChange: props.onChange }));
        case PropertyType.Timing:
            return React.createElement(TimingInput, { name: name, defaultValue: value, onChange: props.onChange });
        case PropertyType.Dosage:
        case PropertyType.UsageContext:
            return (React.createElement(BackboneElementInput, { typeName: propertyType, defaultValue: value, onChange: props.onChange, outcome: props.outcome }));
        default:
            return (React.createElement(BackboneElementInput, { typeName: buildTypeName(property.path?.split('.')), defaultValue: value, onChange: props.onChange, outcome: props.outcome }));
    }
}
function getTargetTypes(property) {
    return property?.type?.[0]?.targetProfile?.map((p) => p.split('/').pop());
}

export { ElementDefinitionInputSelector, ElementDefinitionTypeInput, ResourcePropertyInput };
//# sourceMappingURL=ResourcePropertyInput.mjs.map
