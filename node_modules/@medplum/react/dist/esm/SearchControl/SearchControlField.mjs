import { globalSchema, getSearchParameterDetails } from '@medplum/core';

/**
 * Returns the collection of field definitions for the search request.
 * @param search The search request definition.
 * @returns An array of field definitions.
 */
function getFieldDefinitions(search) {
    const resourceType = search.resourceType;
    const fields = [];
    for (const name of search.fields || ['id', '_lastUpdated']) {
        fields.push(getFieldDefinition(resourceType, name));
    }
    return fields;
}
/**
 * Return the field definition for a given field name.
 * Field names can be either property names or search parameter codes.
 * @param resourceType The resource type.
 * @param name The search field name (either property name or search parameter code).
 * @returns The field definition.
 */
function getFieldDefinition(resourceType, name) {
    if (name === '_lastUpdated') {
        return {
            name: '_lastUpdated',
            searchParams: [
                {
                    resourceType: 'SearchParameter',
                    base: ['Resource'],
                    code: '_lastUpdated',
                    name: '_lastUpdated',
                    type: 'date',
                    expression: 'Resource.meta.lastUpdated',
                },
            ],
        };
    }
    if (name === 'meta.versionId') {
        return {
            name: 'meta.versionId',
            searchParams: [
                {
                    resourceType: 'SearchParameter',
                    base: ['Resource'],
                    code: '_versionId',
                    name: '_versionId',
                    type: 'token',
                    expression: 'Resource.meta.versionId',
                },
            ],
        };
    }
    const typeSchema = globalSchema.types[resourceType];
    const exactElementDefinition = typeSchema.properties[name];
    const exactSearchParam = typeSchema.searchParams?.[name.toLowerCase()];
    // Best case: Exact match of element definition or search parameter.
    // Examples: ServiceRequest.subject, Patient.name, Patient.birthDate
    // In this case, we only show the one search parameter.
    if (exactElementDefinition && exactSearchParam) {
        return { name, elementDefinition: exactElementDefinition, searchParams: [exactSearchParam] };
    }
    // Next best case: Exact match of element definition
    // Examples: Observation.value
    // In this case, there could be zero or more search parameters that are a function of the element definition.
    // So search for those search parameters.
    if (exactElementDefinition) {
        let searchParams = undefined;
        if (typeSchema.searchParams) {
            const path = `${resourceType}.${name.replaceAll('[x]', '')}`;
            searchParams = Object.values(typeSchema.searchParams).filter((p) => p.expression?.includes(path));
            if (searchParams.length === 0) {
                searchParams = undefined;
            }
        }
        return { name, elementDefinition: exactElementDefinition, searchParams };
    }
    // Search parameter case: Exact match of search parameter
    // Examples: Observation.value-quantity, Patient.email
    // Here we have a search parameter, but no element definition.
    // Observation.value-quantity is a search parameter for the Observation.value element.
    // Patient.email is a search parameter for the Patient.telecom element.
    // So we need to walk backwards to find the element definition.
    if (exactSearchParam) {
        const details = getSearchParameterDetails(resourceType, exactSearchParam);
        return { name, elementDefinition: details.elementDefinition, searchParams: [exactSearchParam] };
    }
    // Worst case: no element definition and no search parameter.
    // This is probably a malformed URL that includes an unknown field.
    // We will render the column header, but all cells will be empty.
    return { name };
}

export { getFieldDefinitions };
//# sourceMappingURL=SearchControlField.mjs.map
