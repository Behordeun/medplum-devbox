{"version":3,"file":"SearchControlField.mjs","sources":["../../../src/SearchControl/SearchControlField.ts"],"sourcesContent":["import { getSearchParameterDetails, globalSchema, SearchRequest } from '@medplum/core';\nimport { ElementDefinition, ResourceType, SearchParameter } from '@medplum/fhirtypes';\n\n/**\n * The SearchControlField type describes a field in the search control.\n *\n * In a SearchRequest, a field is a simple string. Strings can be one of the following:\n * 1) Simple property names, which refer to ElementDefinition objects\n * 2) Search parameter names, which refer to SearchParameter resources\n *\n * Consider a few examples of how this becomes complicated.\n *\n * \"name\" (easy)\n *  - element definition path=\"Patient.name\"\n *  - search parameter code=\"name\"\n *\n * \"birthDate\" (medium)\n *  - refers to the element definition path=\"Patient.birthDate\"\n *  - refers to the search parameter code=\"birthdate\" (note the capitalization)\n *\n * \"email\" (hard)\n *  - refers to the search parameter code=\"email\"\n *  - refers to the element definition path=\"Patient.telecom\"\n *\n * In the last case, we start with the search parameter, and walk backwards to the\n * element definition in order to get type details for rendering.\n *\n * Overall, we want columns, fields, properties, and search parameters to feel seamless,\n * so we try our darndest to make this work.\n */\nexport interface SearchControlField {\n  readonly name: string;\n  readonly elementDefinition?: ElementDefinition;\n  readonly searchParams?: SearchParameter[];\n}\n\n/**\n * Returns the collection of field definitions for the search request.\n * @param search The search request definition.\n * @returns An array of field definitions.\n */\nexport function getFieldDefinitions(search: SearchRequest): SearchControlField[] {\n  const resourceType = search.resourceType;\n  const fields = [] as SearchControlField[];\n\n  for (const name of search.fields || ['id', '_lastUpdated']) {\n    fields.push(getFieldDefinition(resourceType, name));\n  }\n  return fields;\n}\n\n/**\n * Return the field definition for a given field name.\n * Field names can be either property names or search parameter codes.\n * @param resourceType The resource type.\n * @param name The search field name (either property name or search parameter code).\n * @returns The field definition.\n */\nfunction getFieldDefinition(resourceType: string, name: string): SearchControlField {\n  if (name === '_lastUpdated') {\n    return {\n      name: '_lastUpdated',\n      searchParams: [\n        {\n          resourceType: 'SearchParameter',\n          base: ['Resource' as ResourceType],\n          code: '_lastUpdated',\n          name: '_lastUpdated',\n          type: 'date',\n          expression: 'Resource.meta.lastUpdated',\n        },\n      ],\n    };\n  }\n\n  if (name === 'meta.versionId') {\n    return {\n      name: 'meta.versionId',\n      searchParams: [\n        {\n          resourceType: 'SearchParameter',\n          base: ['Resource' as ResourceType],\n          code: '_versionId',\n          name: '_versionId',\n          type: 'token',\n          expression: 'Resource.meta.versionId',\n        },\n      ],\n    };\n  }\n\n  const typeSchema = globalSchema.types[resourceType];\n  const exactElementDefinition: ElementDefinition | undefined = typeSchema.properties[name];\n  const exactSearchParam: SearchParameter | undefined = typeSchema.searchParams?.[name.toLowerCase()];\n\n  // Best case: Exact match of element definition or search parameter.\n  // Examples: ServiceRequest.subject, Patient.name, Patient.birthDate\n  // In this case, we only show the one search parameter.\n  if (exactElementDefinition && exactSearchParam) {\n    return { name, elementDefinition: exactElementDefinition, searchParams: [exactSearchParam] };\n  }\n\n  // Next best case: Exact match of element definition\n  // Examples: Observation.value\n  // In this case, there could be zero or more search parameters that are a function of the element definition.\n  // So search for those search parameters.\n  if (exactElementDefinition) {\n    let searchParams: SearchParameter[] | undefined = undefined;\n    if (typeSchema.searchParams) {\n      const path = `${resourceType}.${name.replaceAll('[x]', '')}`;\n      searchParams = Object.values(typeSchema.searchParams).filter((p) => p.expression?.includes(path));\n      if (searchParams.length === 0) {\n        searchParams = undefined;\n      }\n    }\n    return { name, elementDefinition: exactElementDefinition, searchParams };\n  }\n\n  // Search parameter case: Exact match of search parameter\n  // Examples: Observation.value-quantity, Patient.email\n  // Here we have a search parameter, but no element definition.\n  // Observation.value-quantity is a search parameter for the Observation.value element.\n  // Patient.email is a search parameter for the Patient.telecom element.\n  // So we need to walk backwards to find the element definition.\n  if (exactSearchParam) {\n    const details = getSearchParameterDetails(resourceType, exactSearchParam);\n    return { name, elementDefinition: details.elementDefinition, searchParams: [exactSearchParam] };\n  }\n\n  // Worst case: no element definition and no search parameter.\n  // This is probably a malformed URL that includes an unknown field.\n  // We will render the column header, but all cells will be empty.\n  return { name };\n}\n"],"names":[],"mappings":"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"}