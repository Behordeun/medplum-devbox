import { globalSchema, getPropertyDisplayName } from '@medplum/core';
import React from 'react';
import { DEFAULT_IGNORED_PROPERTIES } from '../constants.mjs';
import { DescriptionList, DescriptionListEntry } from '../DescriptionList/DescriptionList.mjs';
import { getValueAndType, ResourcePropertyDisplay } from '../ResourcePropertyDisplay/ResourcePropertyDisplay.mjs';

function BackboneElementDisplay(props) {
    const typedValue = props.value;
    const value = typedValue.value;
    if (!value) {
        return null;
    }
    const typeName = typedValue.type;
    const typeSchema = globalSchema.types[typeName];
    if (!typeSchema) {
        return React.createElement("div", null,
            typeName,
            "\u00A0not implemented");
    }
    if (typeof value === 'object' &&
        'name' in value &&
        Object.keys(value).length === 1 &&
        typeof value.name === 'string') {
        // Special case for common BackboneElement pattern
        // Where there is an object with a single property 'name'
        // Just display the name value.
        return React.createElement("div", null, value.name);
    }
    return (React.createElement(DescriptionList, { compact: props.compact }, Object.entries(typeSchema.properties).map((entry) => {
        const key = entry[0];
        if (DEFAULT_IGNORED_PROPERTIES.indexOf(key) >= 0) {
            return null;
        }
        const property = entry[1];
        if (!property.path) {
            property.path = typeName + '.' + key;
        }
        const [propertyValue, propertyType] = getValueAndType(typedValue, key);
        if (props.ignoreMissingValues &&
            (!propertyValue || (Array.isArray(propertyValue) && propertyValue.length === 0))) {
            return null;
        }
        return (React.createElement(DescriptionListEntry, { key: key, term: getPropertyDisplayName(key) },
            React.createElement(ResourcePropertyDisplay, { property: property, propertyType: propertyType, value: propertyValue, ignoreMissingValues: props.ignoreMissingValues, link: props.link })));
    })));
}

export { BackboneElementDisplay };
//# sourceMappingURL=BackboneElementDisplay.mjs.map
