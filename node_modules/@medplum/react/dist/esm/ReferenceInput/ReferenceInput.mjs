import { Group, NativeSelect, TextInput } from '@mantine/core';
import { createReference } from '@medplum/core';
import React, { useState, useRef } from 'react';
import { ResourceInput } from '../ResourceInput/ResourceInput.mjs';

function ReferenceInput(props) {
    const targetTypes = getTargetTypes(props.targetTypes);
    const initialResourceType = getInitialResourceType(props.defaultValue, targetTypes);
    const [value, setValue] = useState(props.defaultValue);
    const [resourceType, setResourceType] = useState(initialResourceType);
    const valueRef = useRef();
    valueRef.current = value;
    const resourceTypeRef = useRef();
    resourceTypeRef.current = resourceType;
    function setValueHelper(newValue) {
        setValue(newValue);
        if (props.onChange) {
            props.onChange(newValue);
        }
    }
    return (React.createElement(Group, { spacing: "xs", grow: true, noWrap: true },
        targetTypes ? (React.createElement(NativeSelect, { "data-testid": "reference-input-resource-type-select", defaultValue: resourceType, onChange: (e) => setResourceType(e.currentTarget.value), data: targetTypes })) : (React.createElement(TextInput, { "data-testid": "reference-input-resource-type-input", defaultValue: resourceType, onChange: (e) => setResourceType(e.currentTarget.value) })),
        React.createElement(ResourceInput, { resourceType: resourceType, name: props.name + '-id', placeholder: props.placeholder, defaultValue: value, onChange: (item) => {
                setValueHelper(item ? createReference(item) : undefined);
            } })));
}
function getTargetTypes(targetTypes) {
    if (!targetTypes || targetTypes.length === 0 || (targetTypes.length === 1 && targetTypes[0] === 'Resource')) {
        return undefined;
    }
    return targetTypes;
}
function getInitialResourceType(defaultValue, targetTypes) {
    const defaultValueResourceType = defaultValue?.reference?.split('/')[0];
    if (defaultValueResourceType) {
        return defaultValueResourceType;
    }
    if (targetTypes && targetTypes.length > 0) {
        return targetTypes[0];
    }
    return undefined;
}

export { ReferenceInput };
//# sourceMappingURL=ReferenceInput.mjs.map
