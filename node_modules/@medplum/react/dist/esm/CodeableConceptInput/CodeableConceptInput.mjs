import React, { useState } from 'react';
import { ValueSetAutocomplete } from '../ValueSetAutocomplete/ValueSetAutocomplete.mjs';

function CodeableConceptInput(props) {
    const [value, setValue] = useState(props.defaultValue);
    function handleChange(newValues) {
        const newConcept = valueSetElementToCodeableConcept(newValues);
        setValue(newConcept);
        if (props.onChange) {
            props.onChange(newConcept);
        }
    }
    return (React.createElement(ValueSetAutocomplete, { elementDefinition: props.property, name: props.name, placeholder: props.placeholder, defaultValue: value && codeableConceptToValueSetElement(value), onChange: handleChange }));
}
function codeableConceptToValueSetElement(concept) {
    return concept.coding?.map((c) => ({
        system: c.system,
        code: c.code,
        display: c.display,
    }));
}
function valueSetElementToCodeableConcept(elements) {
    if (elements.length === 0) {
        return undefined;
    }
    return {
        coding: elements.map((e) => ({
            system: e.system,
            code: e.code,
            display: e.display,
        })),
    };
}

export { CodeableConceptInput };
//# sourceMappingURL=CodeableConceptInput.mjs.map
