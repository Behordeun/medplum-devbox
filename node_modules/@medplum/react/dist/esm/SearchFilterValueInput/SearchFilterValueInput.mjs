import { TextInput, Checkbox } from '@mantine/core';
import { getSearchParameterDetails, SearchParameterType } from '@medplum/core';
import React from 'react';
import { DateTimeInput } from '../DateTimeInput/DateTimeInput.mjs';
import { QuantityInput } from '../QuantityInput/QuantityInput.mjs';
import { ReferenceInput } from '../ReferenceInput/ReferenceInput.mjs';

function SearchFilterValueInput(props) {
    const details = getSearchParameterDetails(props.resourceType, props.searchParam);
    const name = 'filter-value';
    switch (details.type) {
        case SearchParameterType.REFERENCE:
            return (React.createElement(ReferenceInput, { name: name, defaultValue: { reference: props.defaultValue }, targetTypes: props.searchParam?.target, onChange: (newReference) => {
                    if (newReference) {
                        props.onChange(newReference.reference);
                    }
                    else {
                        props.onChange('');
                    }
                } }));
        case SearchParameterType.BOOLEAN:
            return (React.createElement(Checkbox, { name: name, "data-testid": name, defaultChecked: props.defaultValue === 'true', onChange: (e) => props.onChange(e.currentTarget.checked.toString()) }));
        case SearchParameterType.DATE:
            return (React.createElement(TextInput, { type: "date", name: name, "data-testid": name, defaultValue: props.defaultValue, onChange: (e) => props.onChange(e.currentTarget.value) }));
        case SearchParameterType.DATETIME:
            return React.createElement(DateTimeInput, { name: name, defaultValue: props.defaultValue, onChange: props.onChange });
        case SearchParameterType.NUMBER:
            return (React.createElement(TextInput, { type: "number", name: name, "data-testid": name, defaultValue: props.defaultValue, onChange: (e) => props.onChange(e.currentTarget.value) }));
        case SearchParameterType.QUANTITY:
            return (React.createElement(QuantityInput, { name: name, defaultValue: tryParseQuantity(props.defaultValue), onChange: (newQuantity) => {
                    if (newQuantity) {
                        props.onChange(`${newQuantity.value}`);
                    }
                    else {
                        props.onChange('');
                    }
                } }));
        default:
            return (React.createElement(TextInput, { name: name, "data-testid": name, defaultValue: props.defaultValue, autoFocus: props.autoFocus, onChange: (e) => props.onChange(e.currentTarget.value), placeholder: "Search value" }));
    }
}
function tryParseQuantity(value) {
    if (value) {
        const [valueString, systemString, unitString] = value.split('|');
        if (valueString) {
            return {
                value: parseFloat(valueString),
                system: systemString,
                unit: unitString,
            };
        }
    }
    return undefined;
}

export { SearchFilterValueInput };
//# sourceMappingURL=SearchFilterValueInput.mjs.map
