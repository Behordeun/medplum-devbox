import React, { useCallback } from 'react';
import { AsyncAutocomplete } from '../AsyncAutocomplete/AsyncAutocomplete.mjs';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';

function toKey(element) {
    return element.code;
}
function toOption(element) {
    return {
        value: element.code,
        label: getDisplay(element),
        resource: element,
    };
}
function createValue(input) {
    return {
        code: input,
        display: input,
    };
}
function ValueSetAutocomplete(props) {
    const medplum = useMedplum();
    const { elementDefinition, ...rest } = props;
    const loadValues = useCallback(async (input, signal) => {
        const system = elementDefinition.binding?.valueSet;
        const valueSet = await medplum.searchValueSet(system, input, { signal });
        const valueSetElements = valueSet.expansion?.contains;
        const newData = [];
        for (const valueSetElement of valueSetElements) {
            if (valueSetElement.code && !newData.some((item) => item.code === valueSetElement.code)) {
                newData.push(valueSetElement);
            }
        }
        return newData;
    }, [medplum, elementDefinition]);
    return (React.createElement(AsyncAutocomplete, { ...rest, creatable: true, clearable: true, toKey: toKey, toOption: toOption, loadOptions: loadValues, getCreateLabel: (query) => `+ Create ${query}`, onCreate: createValue }));
}
function getDisplay(item) {
    return item.display || item.code || '';
}

export { ValueSetAutocomplete };
//# sourceMappingURL=ValueSetAutocomplete.mjs.map
