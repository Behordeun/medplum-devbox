{"version":3,"file":"diff.mjs","sources":["../../../src/utils/diff.ts"],"sourcesContent":["/*\n * Myers Diff algorithm\n * Based on: https://github.com/KengoTODA/java-diff-utils/blob/master/src/main/java/difflib/myers/MyersDiff.java\n * Apache Software License, Version 1.1\n */\n\nexport function diff(original: string[], revised: string[]): Delta[] {\n  const path = buildPath(original, revised) as PathNode;\n  return buildRevisions(path, original, revised);\n}\n\nexport interface PathNode {\n  readonly i: number;\n  readonly j: number;\n  readonly prev: PathNode | undefined;\n  readonly snake: boolean;\n}\n\nexport interface Delta {\n  readonly original: Chunk;\n  readonly revised: Chunk;\n  readonly type: 'change' | 'delete' | 'insert';\n}\n\nexport interface Chunk {\n  readonly position: number;\n  readonly lines: string[];\n}\n\nfunction buildPath(orig: string[], rev: string[]): PathNode | undefined {\n  const N = orig.length;\n  const M = rev.length;\n  const MAX = N + M + 1;\n  const size = 1 + 2 * MAX;\n  const middle = (size / 2) | 0;\n  const diagonal: (PathNode | undefined)[] = new Array(size);\n\n  diagonal[middle + 1] = {\n    i: 0,\n    j: -1,\n    prev: undefined,\n    snake: true,\n  };\n\n  for (let d = 0; d < MAX; d++) {\n    for (let k = -d; k <= d; k += 2) {\n      const kmiddle = middle + k;\n      const kplus = kmiddle + 1;\n      const kminus = kmiddle - 1;\n      const kplusNode = diagonal[kplus] as PathNode;\n      const kminusNode = diagonal[kminus] as PathNode;\n      let prev: PathNode | undefined = undefined;\n      let i = 0;\n\n      if (k === -d || (k !== d && kminusNode.i < kplusNode.i)) {\n        i = kplusNode.i;\n        prev = kplusNode;\n      } else {\n        i = kminusNode.i + 1;\n        prev = kminusNode;\n      }\n\n      diagonal[kminus] = undefined; // no longer used\n\n      let j = i - k;\n      let node = {\n        i,\n        j,\n        prev: previousSnake(prev),\n        snake: false,\n      };\n\n      // orig and rev are zero-based\n      // but the algorithm is one-based\n      // that's why there's no +1 when indexing the sequences\n      while (i < N && j < M && orig[i] === rev[j]) {\n        i++;\n        j++;\n      }\n\n      if (i > node.i) {\n        node = {\n          i,\n          j,\n          prev: node,\n          snake: true,\n        };\n      }\n\n      diagonal[kmiddle] = node;\n\n      if (i >= N && j >= M) {\n        return diagonal[kmiddle] as PathNode;\n      }\n    }\n    diagonal[middle + d - 1] = undefined;\n  }\n\n  // According to Myers, this cannot happen\n  return undefined;\n}\n\nfunction buildRevisions(startNode: PathNode, orig: string[], rev: string[]): Delta[] {\n  const deltas: Delta[] = [];\n  let path: PathNode | undefined = startNode;\n\n  if (path.snake) {\n    path = path.prev;\n  }\n\n  while (path && path.prev && path.prev.j >= 0) {\n    const i = path.i;\n    const j = path.j;\n\n    path = path.prev;\n    const ianchor = path.i;\n    const janchor = path.j;\n\n    const original = {\n      position: ianchor,\n      lines: orig.slice(ianchor, i),\n    };\n\n    const revised = {\n      position: janchor,\n      lines: rev.slice(janchor, j),\n    };\n\n    let type: 'insert' | 'delete' | 'change';\n\n    if (original.lines.length === 0 && revised.lines.length > 0) {\n      type = 'insert';\n    } else if (original.lines.length > 0 && revised.lines.length === 0) {\n      type = 'delete';\n    } else {\n      type = 'change';\n    }\n\n    deltas.push({ original, revised, type });\n\n    if (path.snake) {\n      path = path.prev;\n    }\n  }\n\n  return deltas;\n}\n\nfunction previousSnake(node: PathNode): PathNode {\n  if (node && !node.snake && node.prev) {\n    return node.prev;\n  }\n  return node;\n}\n"],"names":[],"mappings":"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"}