{"version":3,"file":"blame.mjs","sources":["../../../src/utils/blame.ts"],"sourcesContent":["import { stringify } from '@medplum/core';\nimport { Bundle, BundleEntry, Meta } from '@medplum/fhirtypes';\nimport { diff } from './diff';\n\nexport interface BlameRow {\n  id: string;\n  meta: Meta;\n  value: string;\n  span: number;\n}\n\nexport function blame(history: Bundle): BlameRow[] {\n  // Convert to array of array of lines\n  const versions = (history.entry as BundleEntry[])\n    .filter((entry) => !!entry.resource)\n    .map((entry) => ({\n      meta: entry.resource?.meta as Meta,\n      lines: stringify(entry.resource, true).match(/[^\\r\\n]+/g) as string[],\n    }))\n    .sort((a, b) => (a.meta.lastUpdated as string).localeCompare(b.meta.lastUpdated as string));\n\n  // Start with array of lines from the first version\n  const table: BlameRow[] = versions[0].lines.map((line) => ({\n    id: versions[0].meta.versionId as string,\n    meta: versions[0].meta,\n    value: line,\n    span: 1,\n  }));\n\n  compareVersions(table, versions);\n  combineSpans(table);\n  return table;\n}\n\n/**\n * For each version, update the blame table with revisions.\n * @param table The output blame table.\n * @param versions The array of versions.\n */\nfunction compareVersions(table: BlameRow[], versions: { meta: Meta; lines: string[] }[]): void {\n  for (let i = 1; i < versions.length; i++) {\n    const revisions = diff(versions[i - 1].lines, versions[i].lines);\n\n    for (const revision of revisions) {\n      const position = revision.original.position;\n      const oldLines = revision.original.lines;\n      const newLines = revision.revised.lines;\n\n      if (revision.type === 'delete' || revision.type === 'change') {\n        // Remove the old rows\n        table.splice(position, oldLines.length);\n      }\n\n      if (revision.type === 'insert' || revision.type === 'change') {\n        // Add the new lines\n        for (let k = 0; k < revision.revised.lines.length; k++) {\n          table.splice(position + k, 0, {\n            id: versions[i].meta.versionId as string,\n            meta: versions[i].meta,\n            value: newLines[k],\n            span: 1,\n          });\n        }\n      }\n    }\n  }\n}\n\n/**\n * Combine adjacent rows into spans.\n * @param table The output blame table.\n */\nfunction combineSpans(table: BlameRow[]): void {\n  let start = 0;\n  while (start < table.length) {\n    let curr = start;\n    while (curr < table.length && table[curr].id === table[start].id) {\n      table[curr].span = -1;\n      curr++;\n    }\n    table[start].span = curr - start;\n    start = curr;\n  }\n}\n"],"names":[],"mappings":"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"}