import { Table } from '@mantine/core';
import { formatDateTime, normalizeErrorString } from '@medplum/core';
import React, { useState, useEffect } from 'react';
import { MedplumLink } from '../MedplumLink/MedplumLink.mjs';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';
import { ResourceBadge } from '../ResourceBadge/ResourceBadge.mjs';

function ResourceHistoryTable(props) {
    const medplum = useMedplum();
    const [value, setValue] = useState(props.history);
    useEffect(() => {
        if (!props.history && props.resourceType && props.id) {
            medplum
                .readHistory(props.resourceType, props.id)
                .then(setValue)
                .catch(console.log);
        }
    }, [medplum, props.history, props.resourceType, props.id]);
    if (!value) {
        return React.createElement("div", null, "Loading...");
    }
    return (React.createElement(Table, { withBorder: true, withColumnBorders: true },
        React.createElement("thead", null,
            React.createElement("tr", null,
                React.createElement("th", null, "Author"),
                React.createElement("th", null, "Date"),
                React.createElement("th", null, "Version"))),
        React.createElement("tbody", null, value.entry?.map((entry, index) => (React.createElement(HistoryRow, { key: 'entry-' + index, entry: entry }))))));
}
function HistoryRow(props) {
    const { response, resource } = props.entry;
    if (resource) {
        return (React.createElement("tr", null,
            React.createElement("td", null,
                React.createElement(ResourceBadge, { value: resource.meta?.author, link: true })),
            React.createElement("td", null, formatDateTime(resource.meta?.lastUpdated)),
            React.createElement("td", null,
                React.createElement(MedplumLink, { to: getVersionUrl(resource) }, resource.meta?.versionId))));
    }
    else {
        return (React.createElement("tr", null,
            React.createElement("td", { colSpan: 3 }, normalizeErrorString(response?.outcome))));
    }
}
function getVersionUrl(resource) {
    return `/${resource.resourceType}/${resource.id}/_history/${resource.meta?.versionId}`;
}

export { ResourceHistoryTable };
//# sourceMappingURL=ResourceHistoryTable.mjs.map
