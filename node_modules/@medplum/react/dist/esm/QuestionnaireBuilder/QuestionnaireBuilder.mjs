import { createStyles, Button, TextInput, Textarea, Title, NativeSelect, Anchor } from '@mantine/core';
import { globalSchema } from '@medplum/core';
import React, { useState, useEffect, useRef } from 'react';
import { Form } from '../Form/Form.mjs';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';
import { QuestionnaireFormItem } from '../QuestionnaireForm/QuestionnaireForm.mjs';
import { getValueAndType } from '../ResourcePropertyDisplay/ResourcePropertyDisplay.mjs';
import { ResourcePropertyInput } from '../ResourcePropertyInput/ResourcePropertyInput.mjs';
import { useResource } from '../useResource/useResource.mjs';
import { killEvent } from '../utils/dom.mjs';
import { QuestionnaireItemType, isChoiceQuestion } from '../utils/questionnaire.mjs';

const useStyles = createStyles((theme) => ({
    section: {
        position: 'relative',
        margin: '4px 4px 8px 0',
        padding: '6px 12px 16px 6px',
        border: `1.5px solid ${theme.colors.gray[1]}`,
        borderRadius: theme.radius.sm,
        transition: 'all 0.1s',
    },
    hovering: {
        border: `1.5px solid ${theme.colors.blue[5]}`,
    },
    editing: {
        border: `1.5px solid ${theme.colors.gray[1]}`,
        borderLeft: `4px solid ${theme.colors.blue[5]}`,
    },
    questionBody: {
        maxWidth: 600,
    },
    topActions: {
        position: 'absolute',
        right: 4,
        top: 1,
        padding: 4,
        color: theme.colors.gray[5],
        fontSize: theme.fontSizes.xs,
    },
    bottomActions: {
        position: 'absolute',
        right: 4,
        bottom: 0,
        fontSize: theme.fontSizes.xs,
        '& a': {
            marginLeft: 8,
        },
    },
    linkIdInput: {
        width: 100,
        marginBottom: 4,
    },
    typeSelect: {
        width: 100,
    },
}));
function QuestionnaireBuilder(props) {
    const medplum = useMedplum();
    const defaultValue = useResource(props.questionnaire);
    const [schema, setSchema] = useState();
    const [value, setValue] = useState();
    const [selectedKey, setSelectedKey] = useState();
    const [hoverKey, setHoverKey] = useState();
    function handleDocumentMouseOver() {
        setHoverKey(undefined);
    }
    function handleDocumentClick() {
        setSelectedKey(undefined);
    }
    useEffect(() => {
        medplum.requestSchema('Questionnaire').then(setSchema).catch(console.log);
    }, [medplum]);
    useEffect(() => {
        setValue(ensureQuestionnaireKeys(defaultValue ?? { resourceType: 'Questionnaire' }));
        document.addEventListener('mouseover', handleDocumentMouseOver);
        document.addEventListener('click', handleDocumentClick);
        return () => {
            document.removeEventListener('mouseover', handleDocumentMouseOver);
            document.removeEventListener('click', handleDocumentClick);
        };
    }, [defaultValue]);
    if (!schema || !value) {
        return null;
    }
    return (React.createElement("div", null,
        React.createElement(Form, { testid: "questionnaire-form", onSubmit: () => props.onSubmit(value) },
            React.createElement(ItemBuilder, { item: value, selectedKey: selectedKey, setSelectedKey: setSelectedKey, hoverKey: hoverKey, setHoverKey: setHoverKey, onChange: setValue }),
            React.createElement(Button, { type: "submit" }, "Save"))));
}
function ItemBuilder(props) {
    const { classes, cx } = useStyles();
    const resource = props.item;
    const item = props.item;
    const isResource = 'resourceType' in props.item;
    const isContainer = isResource || item.type === QuestionnaireItemType.group;
    const linkId = item.linkId ?? '[untitled]';
    const editing = props.selectedKey === props.item.id;
    const hovering = props.hoverKey === props.item.id;
    const itemRef = useRef();
    itemRef.current = props.item;
    function onClick(e) {
        killEvent(e);
        props.setSelectedKey(props.item.id);
    }
    function onHover(e) {
        killEvent(e);
        props.setHoverKey(props.item.id);
    }
    function changeItem(changedItem) {
        const curr = itemRef.current;
        props.onChange({
            ...curr,
            item: curr.item?.map((i) => (i.id === changedItem.id ? changedItem : i)),
        });
    }
    function addItem(addedItem) {
        props.onChange({
            ...props.item,
            item: [...(props.item?.item ?? []), addedItem],
        });
    }
    function removeItem(removedItem) {
        props.onChange({
            ...props.item,
            item: props.item?.item?.filter((i) => i !== removedItem),
        });
    }
    function changeProperty(property, value) {
        props.onChange({
            ...itemRef.current,
            [property]: value,
        });
    }
    const className = cx(classes.section, {
        [classes.editing]: editing,
        [classes.hovering]: hovering && !editing,
    });
    return (React.createElement("div", { "data-testid": item.linkId, className: className, onClick: onClick, onMouseOver: onHover },
        React.createElement("div", { className: classes.questionBody }, editing ? (React.createElement(React.Fragment, null,
            isResource && (React.createElement(TextInput, { size: "xl", defaultValue: resource.title, onChange: (e) => changeProperty('title', e.currentTarget.value) })),
            !isResource && (React.createElement(Textarea, { autosize: true, minRows: 2, defaultValue: item.text, onChange: (e) => changeProperty('text', e.currentTarget.value) })),
            isChoiceQuestion(item) && (React.createElement(AnswerBuilder, { options: item.answerOption, onChange: (newOptions) => changeProperty('answerOption', newOptions) })))) : (React.createElement(React.Fragment, null,
            resource.title && React.createElement(Title, null, resource.title),
            item.text && React.createElement("div", null, item.text),
            !isContainer && React.createElement(QuestionnaireFormItem, { item: item, answers: {}, onChange: () => undefined })))),
        item.item &&
            item.item.map((i) => (React.createElement("div", { key: i.id },
                React.createElement(ItemBuilder, { item: i, selectedKey: props.selectedKey, setSelectedKey: props.setSelectedKey, hoverKey: props.hoverKey, setHoverKey: props.setHoverKey, onChange: changeItem, onRemove: () => removeItem(i) })))),
        !isContainer && (React.createElement("div", { className: classes.topActions }, editing ? (React.createElement(React.Fragment, null,
            React.createElement(TextInput, { size: "xs", className: classes.linkIdInput, defaultValue: item.linkId, onChange: (e) => changeProperty('linkId', e.currentTarget.value) }),
            !isContainer && (React.createElement(NativeSelect, { size: "xs", className: classes.typeSelect, defaultValue: item.type, onChange: (e) => changeProperty('type', e.currentTarget.value), data: [
                    { value: 'display', label: 'Display' },
                    { value: 'boolean', label: 'Boolean' },
                    { value: 'decimal', label: 'Decimal' },
                    { value: 'integer', label: 'Integer' },
                    { value: 'date', label: 'Date' },
                    { value: 'dateTime', label: 'Date/Time' },
                    { value: 'time', label: 'Time' },
                    { value: 'string', label: 'String' },
                    { value: 'text', label: 'Text' },
                    { value: 'url', label: 'URL' },
                    { value: 'choice', label: 'Choice' },
                    { value: 'open-choice', label: 'Open Choice' },
                    { value: 'attachment', label: 'Attachment' },
                    { value: 'reference', label: 'Reference' },
                    { value: 'quantity', label: 'Quantity' },
                ] })))) : (React.createElement("div", null, linkId)))),
        React.createElement("div", { className: classes.bottomActions },
            isContainer && (React.createElement(React.Fragment, null,
                React.createElement(Anchor, { href: "#", onClick: (e) => {
                        e.preventDefault();
                        addItem({
                            id: generateId(),
                            linkId: generateLinkId('q'),
                            type: 'string',
                            text: 'Question',
                        });
                    } }, "Add item"),
                React.createElement(Anchor, { href: "#", onClick: (e) => {
                        e.preventDefault();
                        addItem({
                            id: generateId(),
                            linkId: generateLinkId('g'),
                            type: 'group',
                            text: 'Group',
                        });
                    } }, "Add group"))),
            editing && !isResource && (React.createElement(Anchor, { href: "#", onClick: (e) => {
                    e.preventDefault();
                    if (props.onRemove) {
                        props.onRemove();
                    }
                } }, "Remove")))));
}
function AnswerBuilder(props) {
    const property = globalSchema.types['QuestionnaireItemAnswerOption'].properties['value[x]'];
    const options = props.options ?? [];
    return (React.createElement("div", null,
        options.map((option) => {
            const [propertyValue, propertyType] = getValueAndType({ type: 'QuestionnaireItemAnswerOption', value: option }, 'value');
            return (React.createElement("div", { key: option.id, style: {
                    display: 'flex',
                    flexDirection: 'row',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    width: '80%',
                } },
                React.createElement("div", null,
                    React.createElement(ResourcePropertyInput, { key: option.id, name: "value[x]", property: property, defaultPropertyType: propertyType, defaultValue: propertyValue, onChange: (newValue, propName) => {
                            const newOptions = [...options];
                            const index = newOptions.findIndex((o) => o.id === option.id);
                            newOptions[index] = { id: option.id, [propName]: newValue };
                            props.onChange(newOptions);
                        } })),
                React.createElement("div", null,
                    React.createElement(Anchor, { href: "#", onClick: (e) => {
                            killEvent(e);
                            props.onChange(options.filter((o) => o.id !== option.id));
                        } }, "Remove"))));
        }),
        React.createElement(Anchor, { href: "#", onClick: (e) => {
                killEvent(e);
                props.onChange([
                    ...options,
                    {
                        id: generateId(),
                    },
                ]);
            } }, "Add choice")));
}
let nextLinkId = 1;
let nextId = 1;
/**
 * Generates a link ID for an item.
 * Link IDs are required properties on QuestionnaireItem objects.
 * @return A unique link ID.
 */
function generateLinkId(prefix) {
    return prefix + nextLinkId++;
}
/**
 * Generates a unique ID.
 * React needs unique IDs for components for rendering performance.
 * All of the important components in the questionnaire builder have id properties for this:
 * Questionnaire, QuestionnaireItem, and QuestionnaireItemAnswerOption.
 * @return A unique key.
 */
function generateId() {
    return 'id-' + nextId++;
}
function ensureQuestionnaireKeys(questionnaire) {
    return {
        ...questionnaire,
        id: questionnaire.id || generateId(),
        item: ensureQuestionnaireItemKeys(questionnaire.item),
    };
}
function ensureQuestionnaireItemKeys(items) {
    if (!items) {
        return undefined;
    }
    items.forEach((item) => {
        if (item.id?.match(/^id-\d+$/)) {
            nextId = Math.max(nextId, parseInt(item.id.substring(3)) + 1);
        }
        if (item.linkId?.match(/^q\d+$/)) {
            nextLinkId = Math.max(nextLinkId, parseInt(item.linkId.substring(1)) + 1);
        }
    });
    return items.map((item) => ({
        ...item,
        id: item.id || generateId(),
        item: ensureQuestionnaireItemKeys(item.item),
        answerOption: ensureQuestionnaireOptionKeys(item.answerOption),
    }));
}
function ensureQuestionnaireOptionKeys(options) {
    if (!options) {
        return undefined;
    }
    return options.map((option) => ({
        ...option,
        id: option.id || generateId(),
    }));
}

export { QuestionnaireBuilder };
//# sourceMappingURL=QuestionnaireBuilder.mjs.map
