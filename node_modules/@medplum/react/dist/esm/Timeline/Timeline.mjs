import { Group, Text, Menu, ActionIcon } from '@mantine/core';
import { formatDateTime, getReferenceString } from '@medplum/core';
import { IconDots } from '@tabler/icons';
import React from 'react';
import { Container } from '../Container/Container.mjs';
import { ErrorBoundary } from '../ErrorBoundary/ErrorBoundary.mjs';
import { MedplumLink } from '../MedplumLink/MedplumLink.mjs';
import { Panel } from '../Panel/Panel.mjs';
import { ResourceAvatar } from '../ResourceAvatar/ResourceAvatar.mjs';
import { ResourceName } from '../ResourceName/ResourceName.mjs';

function Timeline(props) {
    return React.createElement(Container, null, props.children);
}
function TimelineItem(props) {
    const { resource, profile, padding, popupMenuItems, ...others } = props;
    const author = profile ?? resource.meta?.author;
    return (React.createElement(Panel, { "data-testid": "timeline-item", fill: true, ...others },
        React.createElement(Group, { position: "apart", spacing: 8, mx: "xs", my: "sm" },
            React.createElement(ResourceAvatar, { value: author, link: true, size: "md" }),
            React.createElement("div", { style: { flex: 1 } },
                React.createElement(Text, { size: "sm" },
                    React.createElement(ResourceName, { color: "dark", weight: 500, value: author, link: true })),
                React.createElement(Text, { size: "xs" },
                    React.createElement(MedplumLink, { color: "dimmed", to: props.resource }, formatDateTime(props.resource.meta?.lastUpdated)),
                    React.createElement(Text, { component: "span", color: "dimmed", mx: 8 }, "\u00B7"),
                    React.createElement(MedplumLink, { color: "dimmed", to: props.resource }, props.resource.resourceType))),
            popupMenuItems && (React.createElement(Menu, { position: "bottom-end", shadow: "md", width: 200 },
                React.createElement(Menu.Target, null,
                    React.createElement(ActionIcon, { radius: "xl", "aria-label": `Actions for ${getReferenceString(props.resource)}` },
                        React.createElement(IconDots, null))),
                popupMenuItems))),
        React.createElement(ErrorBoundary, null,
            padding && React.createElement("div", { style: { padding: '0 16px 16px 16px' } }, props.children),
            !padding && React.createElement(React.Fragment, null, props.children))));
}

export { Timeline, TimelineItem };
//# sourceMappingURL=Timeline.mjs.map
