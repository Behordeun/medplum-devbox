import React, { useState } from 'react';
import { ValueSetAutocomplete } from '../ValueSetAutocomplete/ValueSetAutocomplete.mjs';

function CodingInput(props) {
    const [value, setValue] = useState(props.defaultValue);
    function handleChange(newValues) {
        const newValue = newValues[0];
        const newConcept = newValue && valueSetElementToCoding(newValue);
        setValue(newConcept);
        if (props.onChange) {
            props.onChange(newConcept);
        }
    }
    return (React.createElement(ValueSetAutocomplete, { elementDefinition: props.property, name: props.name, placeholder: props.placeholder, defaultValue: value && codingToValueSetElement(value), onChange: handleChange }));
}
function codingToValueSetElement(coding) {
    return {
        system: coding.system,
        code: coding.code,
        display: coding.display,
    };
}
function valueSetElementToCoding(element) {
    return {
        system: element.system,
        code: element.code,
        display: element.display,
    };
}

export { CodingInput };
//# sourceMappingURL=CodingInput.mjs.map
