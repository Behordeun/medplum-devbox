{"version":3,"file":"useResource.mjs","sources":["../../../src/useResource/useResource.ts"],"sourcesContent":["import { MedplumClient } from '@medplum/core';\nimport { Device, Reference, Resource } from '@medplum/fhirtypes';\nimport { useEffect, useState } from 'react';\nimport { useMedplum } from '../MedplumProvider/MedplumProvider';\n\nconst system: Device = {\n  resourceType: 'Device',\n  id: 'system',\n  deviceName: [\n    {\n      name: 'System',\n    },\n  ],\n};\n\n/**\n * React Hook to use a FHIR reference.\n * Handles the complexity of resolving references and caching resources.\n * @param value The resource or reference to resource.\n * @returns The resolved resource.\n */\nexport function useResource<T extends Resource>(value: Reference<T> | T | undefined): T | undefined {\n  const medplum = useMedplum();\n  const [resource, setResource] = useState<T | undefined>(getInitialResource(medplum, value));\n\n  useEffect(() => {\n    let subscribed = true;\n\n    if (!resource && value && 'reference' in value && value.reference) {\n      medplum\n        .readReference(value as Reference<T>)\n        .then((r) => {\n          if (subscribed) {\n            setResource(r);\n          }\n        })\n        .catch(() => setResource(undefined));\n    }\n\n    return (() => (subscribed = false)) as () => void;\n  }, [medplum, resource, value]);\n\n  return resource;\n}\n\n/**\n * Returns the initial resource value based on the input value.\n * If the input value is a resource, returns the resource.\n * If the input value is a reference to system, returns the system resource.\n * If the input value is a reference to a resource available in the cache, returns the resource.\n * Otherwise, returns undefined.\n * @param medplum The medplum client.\n * @param value The resource or reference to resource.\n * @returns An initial resource if available; undefined otherwise.\n */\nfunction getInitialResource<T extends Resource>(\n  medplum: MedplumClient,\n  value: Reference<T> | T | undefined\n): T | undefined {\n  if (!value) {\n    return undefined;\n  }\n\n  if ('resourceType' in value) {\n    return value;\n  }\n\n  if ('reference' in value) {\n    if (value.reference === 'system') {\n      return system as T;\n    }\n\n    return medplum.getCachedReference(value);\n  }\n\n  return undefined;\n}\n"],"names":[],"mappings":";;;AAKA,MAAM,MAAM,GAAW;AACrB,IAAA,YAAY,EAAE,QAAQ;AACtB,IAAA,EAAE,EAAE,QAAQ;AACZ,IAAA,UAAU,EAAE;AACV,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEF;;;;;AAKG;AACG,SAAU,WAAW,CAAqB,KAAmC,EAAA;AACjF,IAAA,MAAM,OAAO,GAAG,UAAU,EAAE,CAAC;AAC7B,IAAA,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAgB,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IAE5F,SAAS,CAAC,MAAK;QACb,IAAI,UAAU,GAAG,IAAI,CAAC;AAEtB,QAAA,IAAI,CAAC,QAAQ,IAAI,KAAK,IAAI,WAAW,IAAI,KAAK,IAAI,KAAK,CAAC,SAAS,EAAE;YACjE,OAAO;iBACJ,aAAa,CAAC,KAAqB,CAAC;AACpC,iBAAA,IAAI,CAAC,CAAC,CAAC,KAAI;AACV,gBAAA,IAAI,UAAU,EAAE;oBACd,WAAW,CAAC,CAAC,CAAC,CAAC;AAChB,iBAAA;AACH,aAAC,CAAC;iBACD,KAAK,CAAC,MAAM,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;AACxC,SAAA;QAED,QAAQ,OAAO,UAAU,GAAG,KAAK,CAAC,EAAgB;KACnD,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;AAE/B,IAAA,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;;;;;;;;AASG;AACH,SAAS,kBAAkB,CACzB,OAAsB,EACtB,KAAmC,EAAA;IAEnC,IAAI,CAAC,KAAK,EAAE;AACV,QAAA,OAAO,SAAS,CAAC;AAClB,KAAA;IAED,IAAI,cAAc,IAAI,KAAK,EAAE;AAC3B,QAAA,OAAO,KAAK,CAAC;AACd,KAAA;IAED,IAAI,WAAW,IAAI,KAAK,EAAE;AACxB,QAAA,IAAI,KAAK,CAAC,SAAS,KAAK,QAAQ,EAAE;AAChC,YAAA,OAAO,MAAW,CAAC;AACpB,SAAA;AAED,QAAA,OAAO,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;AAC1C,KAAA;AAED,IAAA,OAAO,SAAS,CAAC;AACnB;;;;"}