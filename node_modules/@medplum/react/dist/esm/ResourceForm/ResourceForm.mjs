import { Stack, TextInput, Group, Button } from '@mantine/core';
import { capitalize } from '@medplum/core';
import React, { useState, useEffect } from 'react';
import { BackboneElementInput } from '../BackboneElementInput/BackboneElementInput.mjs';
import { FormSection } from '../FormSection/FormSection.mjs';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';
import { useResource } from '../useResource/useResource.mjs';

function ResourceForm(props) {
    const medplum = useMedplum();
    const defaultValue = useResource(props.defaultValue);
    const [schema, setSchema] = useState();
    const [value, setValue] = useState();
    useEffect(() => {
        if (defaultValue) {
            setValue(JSON.parse(JSON.stringify(defaultValue)));
            medplum.requestSchema(defaultValue.resourceType).then(setSchema).catch(console.log);
        }
    }, [medplum, defaultValue]);
    if (!schema || !value) {
        return React.createElement("div", null, "Loading...");
    }
    return (React.createElement("form", { noValidate: true, autoComplete: "off", onSubmit: (e) => {
            e.preventDefault();
            if (props.onSubmit) {
                props.onSubmit(value);
            }
        } },
        React.createElement(Stack, { mb: "xl" },
            React.createElement(FormSection, { title: "Resource Type", htmlFor: "resourceType", outcome: props.outcome },
                React.createElement(TextInput, { name: "resourceType", defaultValue: value.resourceType, disabled: true })),
            React.createElement(FormSection, { title: "ID", htmlFor: "id", outcome: props.outcome },
                React.createElement(TextInput, { name: "id", defaultValue: value.id, disabled: true }))),
        React.createElement(BackboneElementInput, { typeName: value.resourceType, defaultValue: value, outcome: props.outcome, onChange: setValue }),
        React.createElement(Group, { position: "right", mt: "xl" },
            React.createElement(Button, { type: "submit" }, "OK"),
            props.onDelete && (React.createElement(Button, { variant: "outline", color: "red", type: "button", onClick: () => {
                    props.onDelete(value);
                } }, "Delete")))));
}
function setPropertyValue(obj, key, propName, elementDefinition, value) {
    const types = elementDefinition.type;
    if (types.length > 1) {
        for (const type of types) {
            const compoundKey = key.replace('[x]', capitalize(type.code));
            if (compoundKey in obj) {
                delete obj[compoundKey];
            }
        }
    }
    obj[propName] = value;
    return obj;
}

export { ResourceForm, setPropertyValue };
//# sourceMappingURL=ResourceForm.mjs.map
