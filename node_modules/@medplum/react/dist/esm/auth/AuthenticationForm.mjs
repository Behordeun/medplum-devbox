import { Center, Alert, Group, Divider, Stack, TextInput, PasswordInput, Anchor, Checkbox, Button } from '@mantine/core';
import { IconAlertCircle } from '@tabler/icons';
import React, { useState } from 'react';
import { Form } from '../Form/Form.mjs';
import { getGoogleClientId, GoogleButton } from '../GoogleButton/GoogleButton.mjs';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';
import { getIssuesForExpression, getErrorsForInput } from '../utils/outcomes.mjs';

function AuthenticationForm(props) {
    const { generatePkce, onForgotPassword, onRegister, handleAuthResponse, children, ...baseLoginRequest } = props;
    const medplum = useMedplum();
    const googleClientId = getGoogleClientId(props.googleClientId);
    const [outcome, setOutcome] = useState();
    const issues = getIssuesForExpression(outcome, undefined);
    async function startPkce() {
        if (generatePkce) {
            await medplum.startPkce();
        }
    }
    return (React.createElement(Form, { style: { maxWidth: 400 }, onSubmit: (formData) => {
            startPkce()
                .then(() => medplum.startLogin({
                ...baseLoginRequest,
                email: formData.email,
                password: formData.password,
                remember: formData.remember === 'on',
            }))
                .then(handleAuthResponse)
                .catch(setOutcome);
        } },
        React.createElement(Center, { sx: { flexDirection: 'column' } }, children),
        issues && (React.createElement(Alert, { icon: React.createElement(IconAlertCircle, { size: 16 }), color: "red" }, issues.map((issue) => (React.createElement("div", { "data-testid": "text-field-error", key: issue.details?.text }, issue.details?.text))))),
        googleClientId && (React.createElement(React.Fragment, null,
            React.createElement(Group, { position: "center", p: "xl", style: { height: 70 } },
                React.createElement(GoogleButton, { googleClientId: googleClientId, handleGoogleCredential: (response) => {
                        startPkce()
                            .then(() => medplum.startGoogleLogin({
                            ...baseLoginRequest,
                            googleCredential: response.credential,
                        }))
                            .then(props.handleAuthResponse)
                            .catch(setOutcome);
                    } })),
            React.createElement(Divider, { label: "or", labelPosition: "center", my: "lg" }))),
        React.createElement(Stack, { spacing: "xl" },
            React.createElement(TextInput, { name: "email", type: "email", label: "Email", placeholder: "name@domain.com", required: true, autoFocus: true, error: getErrorsForInput(outcome, 'email') }),
            React.createElement(PasswordInput, { name: "password", type: "password", label: "Password", autoComplete: "off", required: true, error: getErrorsForInput(outcome, 'password') })),
        React.createElement(Group, { position: "apart", mt: "xl", spacing: 0, noWrap: true },
            onForgotPassword && (React.createElement(Anchor, { component: "button", type: "button", color: "dimmed", onClick: onForgotPassword, size: "xs" }, "Forgot password")),
            onRegister && (React.createElement(Anchor, { component: "button", type: "button", color: "dimmed", onClick: onRegister, size: "xs" }, "Register")),
            React.createElement(Checkbox, { id: "remember", name: "remember", label: "Remember me", size: "xs", sx: { lineHeight: 1 } }),
            React.createElement(Button, { type: "submit" }, "Sign in"))));
}

export { AuthenticationForm };
//# sourceMappingURL=AuthenticationForm.mjs.map
