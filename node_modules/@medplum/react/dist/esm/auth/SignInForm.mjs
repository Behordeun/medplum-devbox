import React, { useState } from 'react';
import { Document } from '../Document/Document.mjs';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';
import { AuthenticationForm } from './AuthenticationForm.mjs';
import { ChooseProfileForm } from './ChooseProfileForm.mjs';
import { ChooseScopeForm } from './ChooseScopeForm.mjs';
import { MfaForm } from './MfaForm.mjs';
import { NewProjectForm } from './NewProjectForm.mjs';

/**
 * The SignInForm component allows users to sign in to Medplum.
 *
 * "Signing in" is a multi-step process:
 * 1) Authentication - identify the user
 * 2) MFA - If MFA is enabled, prompt for MFA code
 * 3) Choose profile - If the user has multiple profiles, prompt to choose one
 * 4) Choose scope - If the user has multiple scopes, prompt to choose one
 * 5) Success - Return to the caller with either a code or a redirect
 */
function SignInForm(props) {
    const { chooseScopes, onSuccess, onForgotPassword, onRegister, onCode, ...baseLoginRequest } = props;
    const medplum = useMedplum();
    const [login, setLogin] = useState(undefined);
    const [mfaRequired, setAuthenticatorRequired] = useState(false);
    const [memberships, setMemberships] = useState(undefined);
    function handleAuthResponse(response) {
        setAuthenticatorRequired(!!response.mfaRequired);
        if (response.login) {
            setLogin(response.login);
        }
        if (response.memberships) {
            setMemberships(response.memberships);
        }
        if (response.code) {
            if (chooseScopes) {
                setMemberships(undefined);
            }
            else {
                handleCode(response.code);
            }
        }
    }
    function handleScopeResponse(response) {
        handleCode(response.code);
    }
    function handleCode(code) {
        if (onCode) {
            onCode(code);
        }
        else {
            medplum
                .processCode(code)
                .then(() => {
                if (onSuccess) {
                    onSuccess();
                }
            })
                .catch(console.log);
        }
    }
    return (React.createElement(Document, { width: 450 }, (() => {
        if (!login) {
            return (React.createElement(AuthenticationForm, { generatePkce: !onCode, onForgotPassword: onForgotPassword, onRegister: onRegister, handleAuthResponse: handleAuthResponse, ...baseLoginRequest }, props.children));
        }
        else if (mfaRequired) {
            return React.createElement(MfaForm, { login: login, handleAuthResponse: handleAuthResponse });
        }
        else if (memberships) {
            return React.createElement(ChooseProfileForm, { login: login, memberships: memberships, handleAuthResponse: handleAuthResponse });
        }
        else if (props.projectId === 'new') {
            return React.createElement(NewProjectForm, { login: login, handleAuthResponse: handleAuthResponse });
        }
        else if (props.chooseScopes) {
            return React.createElement(ChooseScopeForm, { login: login, scope: props.scope, handleAuthResponse: handleScopeResponse });
        }
        else {
            return React.createElement("div", null, "Success");
        }
    })()));
}

export { SignInForm };
//# sourceMappingURL=SignInForm.mjs.map
