import { Group, NativeSelect, TextInput } from '@mantine/core';
import React, { useState, useRef } from 'react';

function HumanNameInput(props) {
    const [value, setValue] = useState(props.defaultValue);
    const valueRef = useRef();
    valueRef.current = value;
    function setValueWrapper(newValue) {
        setValue(newValue);
        if (props.onChange) {
            props.onChange(newValue);
        }
    }
    function setUse(use) {
        setValueWrapper({ ...valueRef.current, use: use ? use : undefined });
    }
    function setPrefix(prefix) {
        setValueWrapper({
            ...valueRef.current,
            prefix: prefix ? prefix.split(' ') : undefined,
        });
    }
    function setGiven(given) {
        setValueWrapper({
            ...valueRef.current,
            given: given ? given.split(' ') : undefined,
        });
    }
    function setFamily(family) {
        setValueWrapper({
            ...valueRef.current,
            family: family ? family : undefined,
        });
    }
    function setSuffix(suffix) {
        setValueWrapper({
            ...valueRef.current,
            suffix: suffix ? suffix.split(' ') : undefined,
        });
    }
    return (React.createElement(Group, { spacing: "xs", grow: true, noWrap: true },
        React.createElement(NativeSelect, { defaultValue: value?.use, "data-testid": "use", onChange: (e) => setUse(e.currentTarget.value), data: ['', 'temp', 'old', 'usual', 'official', 'nickname', 'anonymous', 'maiden'] }),
        React.createElement(TextInput, { placeholder: "Prefix", defaultValue: value?.prefix?.join(' '), onChange: (e) => setPrefix(e.currentTarget.value) }),
        React.createElement(TextInput, { placeholder: "Given", defaultValue: value?.given?.join(' '), onChange: (e) => setGiven(e.currentTarget.value) }),
        React.createElement(TextInput, { placeholder: "Family", defaultValue: value?.family, onChange: (e) => setFamily(e.currentTarget.value) }),
        React.createElement(TextInput, { placeholder: "Suffix", defaultValue: value?.suffix?.join(' '), onChange: (e) => setSuffix(e.currentTarget.value) })));
}

export { HumanNameInput };
//# sourceMappingURL=HumanNameInput.mjs.map
