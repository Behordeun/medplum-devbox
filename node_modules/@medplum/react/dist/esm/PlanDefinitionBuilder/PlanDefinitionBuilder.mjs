import { createStyles, TextInput, Button, Anchor, Stack, NativeSelect } from '@mantine/core';
import { getReferenceString } from '@medplum/core';
import React, { useState, useRef, useEffect } from 'react';
import { Form } from '../Form/Form.mjs';
import { FormSection } from '../FormSection/FormSection.mjs';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';
import { ReferenceDisplay } from '../ReferenceDisplay/ReferenceDisplay.mjs';
import { setPropertyValue } from '../ResourceForm/ResourceForm.mjs';
import { ResourceInput } from '../ResourceInput/ResourceInput.mjs';
import { ResourcePropertyDisplay, getValueAndType } from '../ResourcePropertyDisplay/ResourcePropertyDisplay.mjs';
import { ResourcePropertyInput } from '../ResourcePropertyInput/ResourcePropertyInput.mjs';
import { useResource } from '../useResource/useResource.mjs';
import { killEvent } from '../utils/dom.mjs';

const useStyles = createStyles((theme) => ({
    section: {
        position: 'relative',
        margin: '4px 4px 8px 0',
        padding: '6px 12px 16px 6px',
        border: `1.5px solid ${theme.colors.gray[1]}`,
        borderRadius: theme.radius.sm,
        transition: 'all 0.1s',
    },
    hovering: {
        border: `1.5px solid ${theme.colors.blue[5]}`,
    },
    editing: {
        border: `1.5px solid ${theme.colors.gray[1]}`,
        borderLeft: `4px solid ${theme.colors.blue[5]}`,
    },
    bottomActions: {
        position: 'absolute',
        right: 4,
        bottom: 0,
        fontSize: theme.fontSizes.xs,
        '& a': {
            marginLeft: 8,
        },
    },
}));
function PlanDefinitionBuilder(props) {
    const medplum = useMedplum();
    const defaultValue = useResource(props.value);
    const [schema, setSchema] = useState(undefined);
    const [selectedKey, setSelectedKey] = useState();
    const [hoverKey, setHoverKey] = useState();
    const [value, setValue] = useState();
    function handleDocumentMouseOver() {
        setHoverKey(undefined);
    }
    function handleDocumentClick() {
        setSelectedKey(undefined);
    }
    const valueRef = useRef();
    valueRef.current = value;
    useEffect(() => {
        medplum.requestSchema('PlanDefinition').then(setSchema).catch(console.log);
    }, [medplum]);
    useEffect(() => {
        setValue(ensurePlanDefinitionKeys(defaultValue ?? { resourceType: 'PlanDefinition' }));
        document.addEventListener('mouseover', handleDocumentMouseOver);
        document.addEventListener('click', handleDocumentClick);
        return () => {
            document.removeEventListener('mouseover', handleDocumentMouseOver);
            document.removeEventListener('click', handleDocumentClick);
        };
    }, [defaultValue]);
    if (!schema || !value) {
        return null;
    }
    function changeProperty(property, newValue) {
        setValue({
            ...valueRef.current,
            [property]: newValue,
        });
    }
    return (React.createElement("div", null,
        React.createElement(Form, { testid: "questionnaire-form", onSubmit: () => props.onSubmit(value) },
            React.createElement(TextInput, { label: "Plan Title", defaultValue: value.title, onChange: (e) => changeProperty('title', e.currentTarget.value) }),
            React.createElement(ActionArrayBuilder, { actions: value.action || [], selectedKey: selectedKey, setSelectedKey: setSelectedKey, hoverKey: hoverKey, setHoverKey: setHoverKey, onChange: (x) => changeProperty('action', x) }),
            React.createElement(Button, { type: "submit" }, "Save"))));
}
function ActionArrayBuilder(props) {
    const { classes } = useStyles();
    const actionsRef = useRef();
    actionsRef.current = props.actions;
    function changeAction(changedAction) {
        props.onChange(actionsRef.current.map((i) => (i.id === changedAction.id ? changedAction : i)));
    }
    function addAction(addedAction) {
        props.onChange([...actionsRef.current, addedAction]);
        props.setSelectedKey(addedAction.id);
    }
    function removeAction(removedAction) {
        props.onChange(actionsRef.current.filter((i) => i !== removedAction));
    }
    return (React.createElement("div", { className: classes.section },
        props.actions.map((action) => (React.createElement("div", { key: action.id },
            React.createElement(ActionBuilder, { action: action, selectedKey: props.selectedKey, setSelectedKey: props.setSelectedKey, hoverKey: props.hoverKey, setHoverKey: props.setHoverKey, onChange: changeAction, onRemove: () => removeAction(action) })))),
        React.createElement("div", { className: classes.bottomActions },
            React.createElement(Anchor, { href: "#", onClick: (e) => {
                    killEvent(e);
                    addAction({ id: generateId() });
                } }, "Add action"))));
}
function ActionBuilder(props) {
    const { classes, cx } = useStyles();
    const { action } = props;
    const actionType = getInitialActionType(action);
    const editing = props.selectedKey === props.action.id;
    const hovering = props.hoverKey === props.action.id;
    function onClick(e) {
        e.stopPropagation();
        props.setSelectedKey(props.action.id);
    }
    function onHover(e) {
        killEvent(e);
        props.setHoverKey(props.action.id);
    }
    const className = cx(classes.section, {
        [classes.editing]: editing,
        [classes.hovering]: hovering && !editing,
    });
    return (React.createElement("div", { "data-testid": action.id, className: className, onClick: onClick, onMouseOver: onHover },
        editing ? (React.createElement(ActionEditor, { action: action, actionType: actionType, onChange: props.onChange, selectedKey: props.selectedKey, setSelectedKey: props.setSelectedKey, hoverKey: props.hoverKey, setHoverKey: props.setHoverKey, onRemove: props.onRemove })) : (React.createElement(ActionDisplay, { action: action, actionType: actionType })),
        React.createElement("div", { className: classes.bottomActions },
            React.createElement(Anchor, { href: "#", onClick: (e) => {
                    e.preventDefault();
                    props.onRemove();
                } }, "Remove"))));
}
const timingProperty = {
    path: 'PlanDefinition.action.timing[x]',
    min: 0,
    max: '1',
    type: [{ code: 'dateTime' }, { code: 'Period' }, { code: 'Range' }, { code: 'Timing' }],
};
function ActionDisplay(props) {
    const { action, actionType } = props;
    const [propertyValue, propertyType] = getActionTiming(action);
    return (React.createElement("div", null,
        React.createElement("div", null,
            action.title || 'Untitled',
            " ",
            actionType && `(${actionType})`),
        action.definitionCanonical && (React.createElement("div", null,
            React.createElement(ReferenceDisplay, { value: { reference: action.definitionCanonical } }))),
        propertyValue && (React.createElement("div", null,
            React.createElement(ResourcePropertyDisplay, { property: timingProperty, propertyType: propertyType, value: propertyValue })))));
}
function ActionEditor(props) {
    const { action } = props;
    const [actionType, setActionType] = useState(props.actionType);
    function changeProperty(property, value) {
        props.onChange({
            ...action,
            [property]: value,
        });
    }
    return (React.createElement(Stack, { spacing: "xl" },
        React.createElement(TextInput, { name: `actionTitle-${action.id}`, label: "Title", defaultValue: action.title, onChange: (e) => changeProperty('title', e.currentTarget.value) }),
        React.createElement(TextInput, { name: `actionDescription-${action.id}`, label: "Description", defaultValue: action.description, onChange: (e) => changeProperty('description', e.currentTarget.value) }),
        React.createElement(NativeSelect, { label: "Type of Action", description: "The type of the action to be performed.", name: `actionType-${action.id}`, defaultValue: actionType, onChange: (e) => setActionType(e.currentTarget.value), data: ['', 'appointment', 'lab', 'questionnaire', 'task'] }),
        action.action && action.action.length > 0 && (React.createElement(ActionArrayBuilder, { actions: action.action, selectedKey: props.selectedKey, setSelectedKey: props.setSelectedKey, hoverKey: props.hoverKey, setHoverKey: props.setHoverKey, onChange: (x) => changeProperty('action', x) })),
        (() => {
            switch (actionType) {
                case 'appointment':
                    return (React.createElement(ActionResourceTypeBuilder, { title: "Appointment", description: "The subject must schedule an appointment from the schedule.", resourceType: "Schedule", action: action, onChange: props.onChange }));
                case 'lab':
                    return (React.createElement(ActionResourceTypeBuilder, { title: "Lab", description: "The subject must complete the following lab panel.", resourceType: "ActivityDefinition", action: action, onChange: props.onChange }));
                case 'questionnaire':
                    return (React.createElement(ActionResourceTypeBuilder, { title: "Questionnaire", description: "The subject must complete the selected questionnaire.", resourceType: "Questionnaire", action: action, onChange: props.onChange }));
                case 'task':
                    return (React.createElement(ActionResourceTypeBuilder, { title: "Task", description: "The subject must complete the following task.", resourceType: "ActivityDefinition", action: action, onChange: props.onChange }));
                default:
                    return null;
            }
        })(),
        React.createElement(FormSection, { title: "Timing", description: "When the action should take place." },
            React.createElement(ActionTimingInput, { name: 'timing-' + action.id, action: action, onChange: props.onChange }))));
}
function ActionResourceTypeBuilder(props) {
    const { id, definitionCanonical } = props.action;
    const reference = definitionCanonical?.startsWith(props.resourceType + '/')
        ? { reference: definitionCanonical }
        : undefined;
    return (React.createElement(ResourceInput, { name: id, resourceType: props.resourceType, defaultValue: reference, loadOnFocus: true, onChange: (newValue) => {
            if (newValue) {
                props.onChange({ ...props.action, definitionCanonical: getReferenceString(newValue) });
            }
            else {
                props.onChange({ ...props.action, definitionCanonical: undefined });
            }
        } }));
}
function ActionTimingInput(props) {
    const value = props.action;
    const key = 'timing';
    const [propertyValue, propertyType] = getActionTiming(value);
    return (React.createElement(ResourcePropertyInput, { property: timingProperty, name: "timing[x]", defaultValue: propertyValue, defaultPropertyType: propertyType, onChange: (newValue, propName) => {
            props.onChange(setPropertyValue(value, key, propName ?? key, timingProperty, newValue));
        } }));
}
function getInitialActionType(action) {
    if (action.definitionCanonical?.startsWith('Schedule')) {
        return 'appointment';
    }
    if (action.definitionCanonical?.startsWith('Questionnaire/')) {
        return 'questionnaire';
    }
    if (action.definitionCanonical?.startsWith('ActivityDefinition/')) {
        return 'task';
    }
    return undefined;
}
function getActionTiming(action) {
    return getValueAndType({ type: 'PlanDefinitionAction', value: action }, 'timing');
}
let nextId = 1;
/**
 * Generates a unique ID.
 * React needs unique IDs for components for rendering performance.
 * All of the important components in the questionnaire builder have id properties for this:
 * Questionnaire, QuestionnaireItem, and QuestionnaireItemAnswerOption.
 * @return A unique key.
 */
function generateId(existing) {
    if (existing) {
        if (existing.startsWith('id-')) {
            const existingNum = parseInt(existing.substring(3));
            if (!isNaN(existingNum)) {
                nextId = Math.max(nextId, existingNum + 1);
            }
        }
        return existing;
    }
    return 'id-' + nextId++;
}
function ensurePlanDefinitionKeys(planDefinition) {
    return {
        ...planDefinition,
        action: ensurePlanDefinitionActionKeys(planDefinition.action),
    };
}
function ensurePlanDefinitionActionKeys(actions) {
    if (!actions) {
        return undefined;
    }
    return actions.map((action) => ({
        ...action,
        id: generateId(action.id),
        action: ensurePlanDefinitionActionKeys(action.action),
    }));
}

export { PlanDefinitionBuilder };
//# sourceMappingURL=PlanDefinitionBuilder.mjs.map
