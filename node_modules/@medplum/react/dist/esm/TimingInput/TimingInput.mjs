import { Group, Button, Modal, TextInput, NativeSelect, Checkbox } from '@mantine/core';
import { formatTiming } from '@medplum/core';
import React, { useState, useRef } from 'react';
import { DateTimeInput } from '../DateTimeInput/DateTimeInput.mjs';
import { FormSection } from '../FormSection/FormSection.mjs';

const daysOfWeek = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
function TimingInput(props) {
    const [value, setValue] = useState(props.defaultValue || {});
    const [open, setOpen] = useState(false);
    const valueRef = useRef();
    valueRef.current = value;
    return (React.createElement(React.Fragment, null,
        React.createElement(Group, { spacing: "xs", grow: true, noWrap: true },
            React.createElement("span", null, formatTiming(valueRef.current) || 'No repeat'),
            React.createElement(Button, { onClick: () => setOpen(true) }, "Edit")),
        React.createElement(TimingEditorDialog, { visible: open, defaultValue: valueRef.current, onOk: (newValue) => {
                if (props.onChange) {
                    props.onChange(newValue);
                }
                setValue(newValue);
                setOpen(false);
            }, onCancel: () => setOpen(false) })));
}
function TimingEditorDialog(props) {
    const [value, setValue] = useState(props.defaultValue || {});
    const valueRef = useRef();
    valueRef.current = value;
    function setStart(newStart) {
        setValue({ ...valueRef.current, event: [newStart] });
    }
    function setRepeat(repeat) {
        setValue({ ...valueRef.current, repeat });
    }
    function setPeriod(newPeriod) {
        setRepeat({ ...valueRef.current?.repeat, period: newPeriod });
    }
    function setPeriodUnit(newPeriodUnit) {
        setRepeat({ ...valueRef.current?.repeat, periodUnit: newPeriodUnit });
    }
    function setDayOfWeek(day, enabled) {
        if (enabled) {
            addDayOfWeek(day);
        }
        else {
            removeDayOfWeek(day);
        }
    }
    function addDayOfWeek(day) {
        const existing = valueRef.current?.repeat?.dayOfWeek || [];
        if (!existing.includes(day)) {
            setRepeat({ ...valueRef.current?.repeat, dayOfWeek: [...existing, day] });
        }
    }
    function removeDayOfWeek(day) {
        const existing = valueRef.current?.repeat?.dayOfWeek || [];
        if (existing.includes(day)) {
            setRepeat({ ...valueRef.current?.repeat, dayOfWeek: existing.filter((d) => d !== day) });
        }
    }
    return (React.createElement(Modal, { title: "Timing", closeButtonLabel: "Close", opened: props.visible, onClose: () => props.onCancel() },
        React.createElement("div", { style: { padding: '5px 20px', textAlign: 'left' } },
            React.createElement(FormSection, { title: "Starts on", htmlFor: 'timing-dialog-start' },
                React.createElement(DateTimeInput, { name: 'timing-dialog-start', onChange: (newValue) => setStart(newValue) })),
            React.createElement(FormSection, { title: "Repeat every", htmlFor: 'timing-dialog-period' },
                React.createElement(Group, { spacing: "xs", grow: true, noWrap: true },
                    React.createElement(TextInput, { type: "number", step: 1, id: "timing-dialog-period", name: "timing-dialog-period", defaultValue: value?.repeat?.period, onChange: (e) => setPeriod(parseInt(e.currentTarget.value)) }),
                    React.createElement(NativeSelect, { id: "timing-dialog-periodUnit", name: "timing-dialog-periodUnit", defaultValue: value?.repeat?.periodUnit, onChange: (e) => setPeriodUnit(e.currentTarget.value), data: [
                            { label: 'day', value: 'd' },
                            { label: 'week', value: 'wk' },
                            { label: 'month', value: 'mo' },
                            { label: 'year', value: 'a' },
                        ] }))),
            React.createElement(FormSection, { title: "Repeat on" },
                React.createElement(Group, { spacing: "xs", grow: true, noWrap: true }, daysOfWeek.map((day) => (React.createElement(React.Fragment, { key: day },
                    React.createElement("label", { htmlFor: 'timing-dialog-repeat-' + day }, day.charAt(0).toUpperCase()),
                    React.createElement(Checkbox, { id: 'timing-dialog-repeat-' + day, name: 'timing-dialog-repeat-' + day, onChange: (e) => setDayOfWeek(day, e.currentTarget.checked) }))))))),
        React.createElement(Button, { onClick: () => props.onOk(value) }, "OK")));
}

export { TimingInput };
//# sourceMappingURL=TimingInput.mjs.map
