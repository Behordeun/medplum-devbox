import { createStyles } from '@mantine/core';
import React, { useState, useEffect } from 'react';
import { MedplumLink } from '../MedplumLink/MedplumLink.mjs';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';
import { ResourceBadge } from '../ResourceBadge/ResourceBadge.mjs';
import { blame } from '../utils/blame.mjs';

const useStyles = createStyles((theme) => ({
    container: {
        overflowX: 'auto',
    },
    root: {
        border: `0.1px solid ${theme.colors.gray[3]}`,
        borderCollapse: 'collapse',
        borderRadius: theme.radius.sm,
        borderSpacing: 0,
        fontSize: theme.fontSizes.xs,
        width: '100%',
        '& td': {
            padding: '2px 4px 0 4px',
            verticalAlign: 'top',
            whiteSpace: 'nowrap',
        },
    },
    startRow: {
        borderTop: `0.1px solid ${theme.colors.gray[3]}`,
    },
    normalRow: {
        borderTop: 0,
    },
    author: {
        lineHeight: '10px',
    },
    dateTime: {
        borderRight: `0.1px solid ${theme.colors.gray[3]}`,
        lineHeight: '20px',
    },
    lineNumber: {
        backgroundColor: theme.colors.gray[1],
        border: 0,
        color: theme.colors.gray[5],
        fontFamily: theme.fontFamilyMonospace,
        padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,
        textAlign: 'right',
    },
    line: {
        fontFamily: theme.fontFamilyMonospace,
        fontSize: theme.fontSizes.sm,
        padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,
    },
    pre: {
        margin: 0,
    },
}));
function ResourceBlame(props) {
    const { classes } = useStyles();
    const medplum = useMedplum();
    const [value, setValue] = useState(props.history);
    useEffect(() => {
        if (!props.history && props.resourceType && props.id) {
            medplum.readHistory(props.resourceType, props.id).then(setValue).catch(console.log);
        }
    }, [medplum, props.history, props.resourceType, props.id]);
    if (!value) {
        return React.createElement("div", null, "Loading...");
    }
    const resource = value.entry?.[0]?.resource;
    const table = blame(value);
    return (React.createElement("div", { className: classes.container },
        React.createElement("table", { className: classes.root },
            React.createElement("tbody", null, table.map((row, index) => (React.createElement("tr", { key: 'row-' + index, className: row.span > 0 ? classes.startRow : classes.normalRow },
                row.span > 0 && (React.createElement(React.Fragment, null,
                    React.createElement("td", { className: classes.author, rowSpan: row.span },
                        React.createElement(ResourceBadge, { value: row.meta.author, link: true })),
                    React.createElement("td", { className: classes.dateTime, rowSpan: row.span },
                        React.createElement(MedplumLink, { to: getVersionUrl(resource, row.meta.versionId) }, getTimeString(row.meta.lastUpdated))))),
                React.createElement("td", { className: classes.lineNumber }, index + 1),
                React.createElement("td", { className: classes.line },
                    React.createElement("pre", { className: classes.pre }, row.value)))))))));
}
function getVersionUrl(resource, versionId) {
    return `/${resource.resourceType}/${resource.id}/_history/${versionId}`;
}
function getTimeString(lastUpdated) {
    const seconds = Math.floor((Date.now() - Date.parse(lastUpdated)) / 1000);
    const years = Math.floor(seconds / 31536000);
    if (years > 0) {
        return pluralizeTime(years, 'year');
    }
    const months = Math.floor(seconds / 2592000);
    if (months > 0) {
        return pluralizeTime(months, 'month');
    }
    const days = Math.floor(seconds / 86400);
    if (days > 0) {
        return pluralizeTime(days, 'day');
    }
    const hours = Math.floor(seconds / 3600);
    if (hours > 0) {
        return pluralizeTime(hours, 'hour');
    }
    const minutes = Math.floor(seconds / 60);
    if (minutes > 0) {
        return pluralizeTime(minutes, 'minute');
    }
    return pluralizeTime(seconds, 'second');
}
function pluralizeTime(count, noun) {
    return `${count} ${count === 1 ? noun : noun + 's'} ago`;
}

export { ResourceBlame, getTimeString };
//# sourceMappingURL=ResourceBlame.mjs.map
