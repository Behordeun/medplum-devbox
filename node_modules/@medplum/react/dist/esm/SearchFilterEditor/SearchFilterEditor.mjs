import { Modal, Group, Button, NativeSelect } from '@mantine/core';
import { stringify, globalSchema } from '@medplum/core';
import React, { useState, useRef, useEffect } from 'react';
import { setFilters, deleteFilter, buildFieldNameString, getOpString, getSearchOperators, addFilter } from '../SearchControl/SearchUtils.mjs';
import { SearchFilterValueDisplay } from '../SearchFilterValueDisplay/SearchFilterValueDisplay.mjs';
import { SearchFilterValueInput } from '../SearchFilterValueInput/SearchFilterValueInput.mjs';

function SearchFilterEditor(props) {
    const [search, setSearch] = useState(JSON.parse(stringify(props.search)));
    const [editingIndex, setEditingIndex] = useState(-1);
    const searchRef = useRef(search);
    searchRef.current = search;
    useEffect(() => {
        setSearch(JSON.parse(stringify(props.search)));
    }, [props.search]);
    function onAddFilter(filter) {
        setSearch(addFilter(searchRef.current, filter.code, filter.operator, filter.value));
    }
    if (!props.visible) {
        return null;
    }
    const resourceType = props.search.resourceType;
    const searchParams = globalSchema.types[resourceType].searchParams;
    const filters = search.filters || [];
    return (React.createElement(Modal, { title: "Filters", closeButtonLabel: "Close", size: 900, opened: props.visible, onClose: props.onCancel },
        React.createElement("div", null,
            React.createElement("table", null,
                React.createElement("colgroup", null,
                    React.createElement("col", { style: { width: 200 } }),
                    React.createElement("col", { style: { width: 200 } }),
                    React.createElement("col", { style: { width: 380 } }),
                    React.createElement("col", { style: { width: 120 } })),
                React.createElement("thead", null,
                    React.createElement("tr", null,
                        React.createElement("th", null, "Field"),
                        React.createElement("th", null, "Operation"),
                        React.createElement("th", null, "Value"),
                        React.createElement("th", null, "Actions"))),
                React.createElement("tbody", null,
                    filters.map((filter, index) => {
                        if (index === editingIndex) {
                            return (React.createElement(FilterRowInput, { key: `filter-${index}-${filters.length}-input`, resourceType: resourceType, searchParams: searchParams, defaultValue: filter, okText: "Save", onOk: (newFilter) => {
                                    const newFilters = [...filters];
                                    newFilters[index] = newFilter;
                                    setSearch(setFilters(searchRef.current, newFilters));
                                    setEditingIndex(-1);
                                }, onCancel: () => setEditingIndex(-1) }));
                        }
                        else {
                            return (React.createElement(FilterRowDisplay, { key: `filter-${index}-${filters.length}-display`, resourceType: resourceType, searchParams: searchParams, filter: filter, onEdit: () => setEditingIndex(index), onDelete: () => setSearch(deleteFilter(searchRef.current, index)) }));
                        }
                    }),
                    React.createElement(FilterRowInput, { resourceType: resourceType, searchParams: searchParams, okText: "Add", onOk: onAddFilter })))),
        React.createElement(Group, { position: "right", mt: "xl" },
            React.createElement(Button, { onClick: () => props.onOk(searchRef.current) }, "OK"))));
}
function FilterRowDisplay(props) {
    const { filter } = props;
    return (React.createElement("tr", null,
        React.createElement("td", null, buildFieldNameString(filter.code)),
        React.createElement("td", null, getOpString(filter.operator)),
        React.createElement("td", null,
            React.createElement(SearchFilterValueDisplay, { resourceType: props.resourceType, filter: filter })),
        React.createElement("td", null,
            React.createElement(Button, { compact: true, variant: "outline", onClick: props.onEdit }, "Edit"),
            React.createElement(Button, { compact: true, variant: "outline", onClick: props.onDelete }, "Delete"))));
}
function FilterRowInput(props) {
    const [value, setValue] = useState(props.defaultValue ?? {});
    const valueRef = useRef(value);
    valueRef.current = value;
    function setFilterCode(newCode) {
        setValue({ ...valueRef.current, code: newCode });
    }
    function setFilterOperator(newOperator) {
        setValue({ ...valueRef.current, operator: newOperator });
    }
    function setFilterValue(newFilterValue) {
        setValue({ ...valueRef.current, value: newFilterValue });
    }
    const searchParam = props.searchParams[value.code];
    const operators = searchParam && getSearchOperators(searchParam);
    return (React.createElement("tr", null,
        React.createElement("td", null,
            React.createElement(NativeSelect, { "data-testid": "filter-field", defaultValue: valueRef.current.code, onChange: (e) => setFilterCode(e.currentTarget.value), data: Object.keys(props.searchParams).map((param) => ({ value: param, label: buildFieldNameString(param) })) })),
        React.createElement("td", null, operators && (React.createElement(NativeSelect, { "data-testid": "filter-operation", defaultValue: value.operator, onChange: (e) => setFilterOperator(e.currentTarget.value), data: ['', ...operators.map((op) => ({ value: op, label: getOpString(op) }))] }))),
        React.createElement("td", null, searchParam && value.operator && (React.createElement(SearchFilterValueInput, { resourceType: props.resourceType, searchParam: searchParam, defaultValue: value.value, onChange: setFilterValue }))),
        React.createElement("td", null,
            value.code && value.operator && value.value && (React.createElement(Button, { compact: true, variant: "outline", onClick: () => {
                    props.onOk(valueRef.current);
                    setValue({});
                } }, props.okText)),
            props.onCancel && (React.createElement(Button, { compact: true, variant: "outline", onClick: props.onCancel }, "Cancel")))));
}

export { SearchFilterEditor };
//# sourceMappingURL=SearchFilterEditor.mjs.map
