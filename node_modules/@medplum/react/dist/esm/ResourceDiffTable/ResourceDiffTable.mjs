import { createStyles } from '@mantine/core';
import { toTypedValue, stringify, getPropertyDisplayName } from '@medplum/core';
import React, { useState, useEffect } from 'react';
import { useMedplum } from '../MedplumProvider/MedplumProvider.mjs';
import { getValueAndType, ResourcePropertyDisplay } from '../ResourcePropertyDisplay/ResourcePropertyDisplay.mjs';

const useStyles = createStyles((theme) => ({
    root: {
        borderCollapse: 'collapse',
        width: '100%',
        '& tr': {
            borderTop: `0.1px solid ${theme.colors.gray[3]}`,
        },
        '& th, & td': {
            padding: `${theme.spacing.sm}px ${theme.spacing.sm}px`,
            verticalAlign: 'top',
        },
    },
    removed: {
        color: theme.colors.red[7],
        textDecoration: 'line-through',
    },
    added: {
        color: theme.colors.green[7],
    },
}));
function ResourceDiffTable(props) {
    const { classes } = useStyles();
    const medplum = useMedplum();
    const [schema, setSchema] = useState();
    useEffect(() => {
        medplum.requestSchema(props.original.resourceType).then(setSchema).catch(console.log);
    }, [medplum, props.original.resourceType]);
    if (!schema) {
        return null;
    }
    const typeSchema = schema.types[props.original.resourceType];
    if (!typeSchema) {
        return null;
    }
    return (React.createElement("table", { className: classes.root },
        React.createElement("colgroup", null,
            React.createElement("col", { style: { width: '30%' } }),
            React.createElement("col", { style: { width: '35%' } }),
            React.createElement("col", { style: { width: '35%' } })),
        React.createElement("thead", null,
            React.createElement("tr", null,
                React.createElement("th", null, "Property"),
                React.createElement("th", null, "Before"),
                React.createElement("th", null, "After"))),
        React.createElement("tbody", null, Object.entries(typeSchema.properties).map((entry) => {
            const key = entry[0];
            if (key === 'id' || key === 'meta') {
                return null;
            }
            const property = entry[1];
            const [originalPropertyValue, originalPropertyType] = getValueAndType(toTypedValue(props.original), key);
            const [revisedPropertyValue, revisedPropertyType] = getValueAndType(toTypedValue(props.revised), key);
            if (isEmpty(originalPropertyValue) && isEmpty(revisedPropertyValue)) {
                return null;
            }
            if (stringify(originalPropertyValue) === stringify(revisedPropertyValue)) {
                return null;
            }
            return (React.createElement("tr", { key: key },
                React.createElement("td", null, getPropertyDisplayName(key)),
                React.createElement("td", { className: classes.removed },
                    React.createElement(ResourcePropertyDisplay, { property: property, propertyType: originalPropertyType, value: originalPropertyValue, ignoreMissingValues: true })),
                React.createElement("td", { className: classes.added },
                    React.createElement(ResourcePropertyDisplay, { property: property, propertyType: revisedPropertyType, value: revisedPropertyValue, ignoreMissingValues: true }))));
        }))));
}
function isEmpty(value) {
    return (!value ||
        (Array.isArray(value) && value.length === 0) ||
        (typeof value === 'object' && Object.keys(value).length === 0));
}

export { ResourceDiffTable };
//# sourceMappingURL=ResourceDiffTable.mjs.map
