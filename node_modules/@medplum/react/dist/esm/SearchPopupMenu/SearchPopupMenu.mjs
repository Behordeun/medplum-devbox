import { Menu } from '@mantine/core';
import { Operator } from '@medplum/core';
import { IconSortAscending, IconSortDescending, IconEqual, IconEqualNot, IconMathLower, IconMathGreater, IconBracketsContain, IconCalendar, IconSettings, IconBucket, IconBucketOff, IconBleach, IconBleachOff, IconX } from '@tabler/icons';
import React from 'react';
import { buildFieldNameString, addTomorrowFilter, addTodayFilter, addYesterdayFilter, addNextMonthFilter, addThisMonthFilter, addLastMonthFilter, addYearToDateFilter, addMissingFilter, setSort, clearFiltersOnField } from '../SearchControl/SearchUtils.mjs';

function SearchPopupMenu(props) {
    if (!props.searchParams) {
        return null;
    }
    function onSort(searchParam, desc) {
        onChange(setSort(props.search, searchParam.code, desc));
    }
    function onClear(searchParam) {
        onChange(clearFiltersOnField(props.search, searchParam.code));
    }
    function onPrompt(searchParam, operator) {
        props.onPrompt(searchParam, { code: searchParam.code, operator, value: '' });
    }
    function onChange(definition) {
        props.onChange(definition);
    }
    // If there is only one search parameter, then show it directly
    if (props.searchParams.length === 1) {
        return (React.createElement(SearchParameterSubMenu, { search: props.search, searchParam: props.searchParams[0], onSort: onSort, onPrompt: onPrompt, onChange: onChange, onClear: onClear }));
    }
    // Otherwise, show a menu, with each search parameter as a sub menu
    return (React.createElement(Menu.Dropdown, null, props.searchParams.map((searchParam) => (React.createElement(Menu.Item, { key: searchParam.code }, buildFieldNameString(searchParam.code))))));
}
function SearchParameterSubMenu(props) {
    switch (props.searchParam.type) {
        case 'date':
            return React.createElement(DateFilterSubMenu, { ...props });
        case 'number':
        case 'quantity':
            return React.createElement(NumericFilterSubMenu, { ...props });
        case 'reference':
            return React.createElement(ReferenceFilterSubMenu, { ...props });
        case 'string':
        case 'token':
        case 'uri':
            return React.createElement(TextFilterSubMenu, { ...props });
        default:
            return React.createElement(React.Fragment, null,
                "Unknown search param type: ",
                props.searchParam.type);
    }
}
function DateFilterSubMenu(props) {
    const { searchParam } = props;
    const code = searchParam.code;
    return (React.createElement(Menu.Dropdown, null,
        React.createElement(Menu.Item, { icon: React.createElement(IconSortAscending, { size: 14 }), onClick: () => props.onSort(searchParam, false) }, "Sort Oldest to Newest"),
        React.createElement(Menu.Item, { icon: React.createElement(IconSortDescending, { size: 14 }), onClick: () => props.onSort(searchParam, true) }, "Sort Newest to Oldest"),
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconEqual, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.EQUALS) }, "Equals..."),
        React.createElement(Menu.Item, { icon: React.createElement(IconEqualNot, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.NOT_EQUALS) }, "Does not equal..."),
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconMathLower, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.ENDS_BEFORE) }, "Before..."),
        React.createElement(Menu.Item, { icon: React.createElement(IconMathGreater, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.STARTS_AFTER) }, "After..."),
        React.createElement(Menu.Item, { icon: React.createElement(IconBracketsContain, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.EQUALS) }, "Between..."),
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconCalendar, { size: 14 }), onClick: () => props.onChange(addTomorrowFilter(props.search, code)) }, "Tomorrow"),
        React.createElement(Menu.Item, { icon: React.createElement(IconCalendar, { size: 14 }), onClick: () => props.onChange(addTodayFilter(props.search, code)) }, "Today"),
        React.createElement(Menu.Item, { icon: React.createElement(IconCalendar, { size: 14 }), onClick: () => props.onChange(addYesterdayFilter(props.search, code)) }, "Yesterday"),
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconCalendar, { size: 14 }), onClick: () => props.onChange(addNextMonthFilter(props.search, code)) }, "Next Month"),
        React.createElement(Menu.Item, { icon: React.createElement(IconCalendar, { size: 14 }), onClick: () => props.onChange(addThisMonthFilter(props.search, code)) }, "This Month"),
        React.createElement(Menu.Item, { icon: React.createElement(IconCalendar, { size: 14 }), onClick: () => props.onChange(addLastMonthFilter(props.search, code)) }, "Last Month"),
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconCalendar, { size: 14 }), onClick: () => props.onChange(addYearToDateFilter(props.search, code)) }, "Year to date"),
        React.createElement(CommonMenuItems, { ...props })));
}
function NumericFilterSubMenu(props) {
    const { searchParam } = props;
    return (React.createElement(Menu.Dropdown, null,
        React.createElement(Menu.Item, { icon: React.createElement(IconSortAscending, { size: 14 }), onClick: () => props.onSort(searchParam, false) }, "Sort Smallest to Largest"),
        React.createElement(Menu.Item, { icon: React.createElement(IconSortDescending, { size: 14 }), onClick: () => props.onSort(searchParam, true) }, "Sort Largest to Smallest"),
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconEqual, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.EQUALS) }, "Equals..."),
        React.createElement(Menu.Item, { icon: React.createElement(IconEqualNot, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.NOT_EQUALS) }, "Does not equal..."),
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconMathGreater, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.GREATER_THAN) }, "Greater than..."),
        React.createElement(Menu.Item, { icon: React.createElement(IconSettings, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.GREATER_THAN_OR_EQUALS) }, "Greater than or equal to..."),
        React.createElement(Menu.Item, { icon: React.createElement(IconMathLower, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.LESS_THAN) }, "Less than..."),
        React.createElement(Menu.Item, { icon: React.createElement(IconSettings, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.LESS_THAN_OR_EQUALS) }, "Less than or equal to..."),
        React.createElement(CommonMenuItems, { ...props })));
}
function ReferenceFilterSubMenu(props) {
    const { searchParam } = props;
    return (React.createElement(Menu.Dropdown, null,
        React.createElement(Menu.Item, { icon: React.createElement(IconEqual, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.EQUALS) }, "Equals..."),
        React.createElement(Menu.Item, { icon: React.createElement(IconEqualNot, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.NOT) }, "Does not equal..."),
        React.createElement(CommonMenuItems, { ...props })));
}
function TextFilterSubMenu(props) {
    const { searchParam } = props;
    return (React.createElement(Menu.Dropdown, null,
        React.createElement(Menu.Item, { icon: React.createElement(IconSortAscending, { size: 14 }), onClick: () => props.onSort(searchParam, false) }, "Sort A to Z"),
        React.createElement(Menu.Item, { icon: React.createElement(IconSortDescending, { size: 14 }), onClick: () => props.onSort(searchParam, true) }, "Sort Z to A"),
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconEqual, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.EQUALS) }, "Equals..."),
        React.createElement(Menu.Item, { icon: React.createElement(IconEqualNot, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.NOT) }, "Does not equal..."),
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconBucket, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.CONTAINS) }, "Contains..."),
        React.createElement(Menu.Item, { icon: React.createElement(IconBucketOff, { size: 14 }), onClick: () => props.onPrompt(searchParam, Operator.EQUALS) }, "Does not contain..."),
        React.createElement(CommonMenuItems, { ...props })));
}
function CommonMenuItems(props) {
    const { searchParam } = props;
    const code = searchParam.code;
    return (React.createElement(React.Fragment, null,
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconBleach, { size: 14 }), onClick: () => props.onChange(addMissingFilter(props.search, code)) }, "Missing"),
        React.createElement(Menu.Item, { icon: React.createElement(IconBleachOff, { size: 14 }), onClick: () => props.onChange(addMissingFilter(props.search, code, false)) }, "Not missing"),
        React.createElement(Menu.Divider, null),
        React.createElement(Menu.Item, { icon: React.createElement(IconX, { size: 14 }), onClick: () => props.onClear(searchParam) }, "Clear filters")));
}

export { SearchPopupMenu };
//# sourceMappingURL=SearchPopupMenu.mjs.map
